                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.1 #15267 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	
                                      7 ;--------------------------------------------------------
                                      8 ; Public variables in this module
                                      9 ;--------------------------------------------------------
                                     10 	.globl _main
                                     11 	.globl _get_right_message
                                     12 	.globl _get_left_message
                                     13 	.globl _get_down_message
                                     14 	.globl _get_up_message
                                     15 	.globl _get_play_message
                                     16 	.globl _get_feed_message
                                     17 	.globl _get_pet_name
                                     18 	.globl _setup_pet_sprite
                                     19 	.globl _show_selection_menu
                                     20 	.globl _setup_dog_sprite_main
                                     21 	.globl _setup_dog_sprite_selection
                                     22 	.globl _puts
                                     23 	.globl _printf
                                     24 	.globl _set_sprite_data
                                     25 	.globl _wait_vbl_done
                                     26 	.globl _joypad
                                     27 	.globl _selected_pet
                                     28 	.globl _CatSprite
                                     29 	.globl _PoodleSprite
                                     30 	.globl _setup_cat_sprite_selection
                                     31 	.globl _setup_cat_sprite_main
                                     32 ;--------------------------------------------------------
                                     33 ; special function registers
                                     34 ;--------------------------------------------------------
                                     35 ;--------------------------------------------------------
                                     36 ; ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area _DATA
    00000000                         39 _main_time_counter_20003_369:
    00000000                         40 	.ds 1
                                     41 ;--------------------------------------------------------
                                     42 ; ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area _INITIALIZED
    00000000                         45 _PoodleSprite::
    00000000                         46 	.ds 96
    00000060                         47 _CatSprite::
    00000060                         48 	.ds 144
    000000F0                         49 _selected_pet::
    000000F0                         50 	.ds 1
                                     51 ;--------------------------------------------------------
                                     52 ; absolute external ram data
                                     53 ;--------------------------------------------------------
                                     54 	.area _DABS (ABS)
                                     55 ;--------------------------------------------------------
                                     56 ; global & static initialisations
                                     57 ;--------------------------------------------------------
                                     58 	.area _HOME
                                     59 	.area _GSINIT
                                     60 	.area _GSFINAL
                                     61 	.area _GSINIT
                                     62 ;main.c:254: static UBYTE time_counter = 0;
    00000000 AF               [ 4]   63 	xor	a, a
    00000001 21r00r00         [12]   64 	ld	hl, #_main_time_counter_20003_369
    00000004 77               [ 8]   65 	ld	(hl), a
                                     66 ;--------------------------------------------------------
                                     67 ; Home
                                     68 ;--------------------------------------------------------
                                     69 	.area _HOME
                                     70 	.area _HOME
                                     71 ;--------------------------------------------------------
                                     72 ; code
                                     73 ;--------------------------------------------------------
                                     74 	.area _CODE
                                     75 ;cat_sprite.h:12: void setup_cat_sprite_selection(void)
                                     76 ;	---------------------------------
                                     77 ; Function setup_cat_sprite_selection
                                     78 ; ---------------------------------
    00000000                         79 _setup_cat_sprite_selection::
                                     80 ;cat_sprite.h:15: set_sprite_data(6, 9, CatSprite);
    00000000 11r60r00         [12]   81 	ld	de, #_CatSprite
    00000003 D5               [16]   82 	push	de
    00000004 21 06 09         [12]   83 	ld	hl, #0x906
    00000007 E5               [16]   84 	push	hl
    00000008 CDr00r00         [24]   85 	call	_set_sprite_data
    0000000B E8 04            [16]   86 	add	sp, #4
                                     87 ;c:\gbdk\include\gb\gb.h:1887: shadow_OAM[nb].tile=tile;
    0000000D 21r1Ar00         [12]   88 	ld	hl, #(_shadow_OAM + 26)
    00000010 36 06            [12]   89 	ld	(hl), #0x06
    00000012 21r1Er00         [12]   90 	ld	hl, #(_shadow_OAM + 30)
    00000015 36 07            [12]   91 	ld	(hl), #0x07
    00000017 21r22r00         [12]   92 	ld	hl, #(_shadow_OAM + 34)
    0000001A 36 08            [12]   93 	ld	(hl), #0x08
    0000001C 21r26r00         [12]   94 	ld	hl, #(_shadow_OAM + 38)
    0000001F 36 09            [12]   95 	ld	(hl), #0x09
    00000021 21r2Ar00         [12]   96 	ld	hl, #(_shadow_OAM + 42)
    00000024 36 0A            [12]   97 	ld	(hl), #0x0a
    00000026 21r2Er00         [12]   98 	ld	hl, #(_shadow_OAM + 46)
    00000029 36 0B            [12]   99 	ld	(hl), #0x0b
    0000002B 21r32r00         [12]  100 	ld	hl, #(_shadow_OAM + 50)
    0000002E 36 0C            [12]  101 	ld	(hl), #0x0c
    00000030 21r36r00         [12]  102 	ld	hl, #(_shadow_OAM + 54)
    00000033 36 0D            [12]  103 	ld	(hl), #0x0d
    00000035 21r3Ar00         [12]  104 	ld	hl, #(_shadow_OAM + 58)
    00000038 36 0E            [12]  105 	ld	(hl), #0x0e
                                    106 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000003A 21r18r00         [12]  107 	ld	hl, #(_shadow_OAM + 24)
                                    108 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    0000003D 3E 24            [ 8]  109 	ld	a, #0x24
    0000003F 22               [ 8]  110 	ld	(hl+), a
    00000040 36 60            [12]  111 	ld	(hl), #0x60
                                    112 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    00000042 21r1Cr00         [12]  113 	ld	hl, #(_shadow_OAM + 28)
                                    114 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    00000045 3E 24            [ 8]  115 	ld	a, #0x24
    00000047 22               [ 8]  116 	ld	(hl+), a
    00000048 36 68            [12]  117 	ld	(hl), #0x68
                                    118 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000004A 21r20r00         [12]  119 	ld	hl, #(_shadow_OAM + 32)
                                    120 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    0000004D 3E 24            [ 8]  121 	ld	a, #0x24
    0000004F 22               [ 8]  122 	ld	(hl+), a
    00000050 36 70            [12]  123 	ld	(hl), #0x70
                                    124 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    00000052 21r24r00         [12]  125 	ld	hl, #(_shadow_OAM + 36)
                                    126 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    00000055 3E 2C            [ 8]  127 	ld	a, #0x2c
    00000057 22               [ 8]  128 	ld	(hl+), a
    00000058 36 60            [12]  129 	ld	(hl), #0x60
                                    130 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000005A 21r28r00         [12]  131 	ld	hl, #(_shadow_OAM + 40)
                                    132 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    0000005D 3E 2C            [ 8]  133 	ld	a, #0x2c
    0000005F 22               [ 8]  134 	ld	(hl+), a
    00000060 36 68            [12]  135 	ld	(hl), #0x68
                                    136 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    00000062 21r2Cr00         [12]  137 	ld	hl, #(_shadow_OAM + 44)
                                    138 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    00000065 3E 2C            [ 8]  139 	ld	a, #0x2c
    00000067 22               [ 8]  140 	ld	(hl+), a
    00000068 36 70            [12]  141 	ld	(hl), #0x70
                                    142 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000006A 21r30r00         [12]  143 	ld	hl, #(_shadow_OAM + 48)
                                    144 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    0000006D 3E 34            [ 8]  145 	ld	a, #0x34
    0000006F 22               [ 8]  146 	ld	(hl+), a
    00000070 36 60            [12]  147 	ld	(hl), #0x60
                                    148 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    00000072 21r34r00         [12]  149 	ld	hl, #(_shadow_OAM + 52)
                                    150 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    00000075 3E 34            [ 8]  151 	ld	a, #0x34
    00000077 22               [ 8]  152 	ld	(hl+), a
    00000078 36 68            [12]  153 	ld	(hl), #0x68
                                    154 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000007A 21r38r00         [12]  155 	ld	hl, #(_shadow_OAM + 56)
                                    156 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    0000007D 3E 34            [ 8]  157 	ld	a, #0x34
    0000007F 22               [ 8]  158 	ld	(hl+), a
    00000080 36 70            [12]  159 	ld	(hl), #0x70
                                    160 ;cat_sprite.h:34: move_sprite(14, 112, 52); // down right
                                    161 ;cat_sprite.h:35: }
    00000082 C9               [16]  162 	ret
                                    163 ;cat_sprite.h:37: void setup_cat_sprite_main(void)
                                    164 ;	---------------------------------
                                    165 ; Function setup_cat_sprite_main
                                    166 ; ---------------------------------
    00000083                        167 _setup_cat_sprite_main::
                                    168 ;cat_sprite.h:40: set_sprite_data(0, 9, CatSprite);
    00000083 11r60r00         [12]  169 	ld	de, #_CatSprite
    00000086 D5               [16]  170 	push	de
    00000087 21 00 09         [12]  171 	ld	hl, #0x900
    0000008A E5               [16]  172 	push	hl
    0000008B CDr00r00         [24]  173 	call	_set_sprite_data
    0000008E E8 04            [16]  174 	add	sp, #4
                                    175 ;c:\gbdk\include\gb\gb.h:1887: shadow_OAM[nb].tile=tile;
    00000090 21r02r00         [12]  176 	ld	hl, #(_shadow_OAM + 2)
    00000093 36 00            [12]  177 	ld	(hl), #0x00
    00000095 21r06r00         [12]  178 	ld	hl, #(_shadow_OAM + 6)
    00000098 36 01            [12]  179 	ld	(hl), #0x01
    0000009A 21r0Ar00         [12]  180 	ld	hl, #(_shadow_OAM + 10)
    0000009D 36 02            [12]  181 	ld	(hl), #0x02
    0000009F 21r0Er00         [12]  182 	ld	hl, #(_shadow_OAM + 14)
    000000A2 36 03            [12]  183 	ld	(hl), #0x03
    000000A4 21r12r00         [12]  184 	ld	hl, #(_shadow_OAM + 18)
    000000A7 36 04            [12]  185 	ld	(hl), #0x04
    000000A9 21r16r00         [12]  186 	ld	hl, #(_shadow_OAM + 22)
    000000AC 36 05            [12]  187 	ld	(hl), #0x05
    000000AE 21r1Ar00         [12]  188 	ld	hl, #(_shadow_OAM + 26)
    000000B1 36 06            [12]  189 	ld	(hl), #0x06
    000000B3 21r1Er00         [12]  190 	ld	hl, #(_shadow_OAM + 30)
    000000B6 36 07            [12]  191 	ld	(hl), #0x07
    000000B8 21r22r00         [12]  192 	ld	hl, #(_shadow_OAM + 34)
    000000BB 36 08            [12]  193 	ld	(hl), #0x08
                                    194 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    000000BD 21r00r00         [12]  195 	ld	hl, #_shadow_OAM
                                    196 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    000000C0 3E 24            [ 8]  197 	ld	a, #0x24
    000000C2 22               [ 8]  198 	ld	(hl+), a
    000000C3 36 44            [12]  199 	ld	(hl), #0x44
                                    200 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    000000C5 21r04r00         [12]  201 	ld	hl, #(_shadow_OAM + 4)
                                    202 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    000000C8 3E 24            [ 8]  203 	ld	a, #0x24
    000000CA 22               [ 8]  204 	ld	(hl+), a
    000000CB 36 4C            [12]  205 	ld	(hl), #0x4c
                                    206 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    000000CD 21r08r00         [12]  207 	ld	hl, #(_shadow_OAM + 8)
                                    208 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    000000D0 3E 24            [ 8]  209 	ld	a, #0x24
    000000D2 22               [ 8]  210 	ld	(hl+), a
    000000D3 36 54            [12]  211 	ld	(hl), #0x54
                                    212 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    000000D5 21r0Cr00         [12]  213 	ld	hl, #(_shadow_OAM + 12)
                                    214 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    000000D8 3E 2C            [ 8]  215 	ld	a, #0x2c
    000000DA 22               [ 8]  216 	ld	(hl+), a
    000000DB 36 44            [12]  217 	ld	(hl), #0x44
                                    218 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    000000DD 21r10r00         [12]  219 	ld	hl, #(_shadow_OAM + 16)
                                    220 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    000000E0 3E 2C            [ 8]  221 	ld	a, #0x2c
    000000E2 22               [ 8]  222 	ld	(hl+), a
    000000E3 36 4C            [12]  223 	ld	(hl), #0x4c
                                    224 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    000000E5 21r14r00         [12]  225 	ld	hl, #(_shadow_OAM + 20)
                                    226 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    000000E8 3E 2C            [ 8]  227 	ld	a, #0x2c
    000000EA 22               [ 8]  228 	ld	(hl+), a
    000000EB 36 54            [12]  229 	ld	(hl), #0x54
                                    230 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    000000ED 21r18r00         [12]  231 	ld	hl, #(_shadow_OAM + 24)
                                    232 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    000000F0 3E 34            [ 8]  233 	ld	a, #0x34
    000000F2 22               [ 8]  234 	ld	(hl+), a
    000000F3 36 44            [12]  235 	ld	(hl), #0x44
                                    236 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    000000F5 21r1Cr00         [12]  237 	ld	hl, #(_shadow_OAM + 28)
                                    238 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    000000F8 3E 34            [ 8]  239 	ld	a, #0x34
    000000FA 22               [ 8]  240 	ld	(hl+), a
    000000FB 36 4C            [12]  241 	ld	(hl), #0x4c
                                    242 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    000000FD 21r20r00         [12]  243 	ld	hl, #(_shadow_OAM + 32)
                                    244 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    00000100 3E 34            [ 8]  245 	ld	a, #0x34
    00000102 22               [ 8]  246 	ld	(hl+), a
    00000103 36 54            [12]  247 	ld	(hl), #0x54
                                    248 ;cat_sprite.h:62: move_sprite(8, 84, 52);
                                    249 ;cat_sprite.h:63: }
    00000105 C9               [16]  250 	ret
                                    251 ;dog_sprite2.h:3: void setup_dog_sprite_selection(void) {
                                    252 ;	---------------------------------
                                    253 ; Function setup_dog_sprite_selection
                                    254 ; ---------------------------------
    00000106                        255 _setup_dog_sprite_selection::
                                    256 ;dog_sprite2.h:7: set_sprite_data(0, 19, Poodle2_tiles); // 304 bytes / 16 bytes per tile = 19 tiles
    00000106 11r00r00         [12]  257 	ld	de, #_Poodle2_tiles
    00000109 D5               [16]  258 	push	de
    0000010A 21 00 13         [12]  259 	ld	hl, #0x1300
    0000010D E5               [16]  260 	push	hl
    0000010E CDr00r00         [24]  261 	call	_set_sprite_data
    00000111 E8 04            [16]  262 	add	sp, #4
                                    263 ;dog_sprite2.h:10: SHOW_SPRITES;
    00000113 F0r00            [12]  264 	ldh	a, (_LCDC_REG + 0)
    00000115 F6 02            [ 8]  265 	or	a, #0x02
    00000117 E0r00            [12]  266 	ldh	(_LCDC_REG + 0), a
                                    267 ;c:\gbdk\include\gb\gb.h:1887: shadow_OAM[nb].tile=tile;
    00000119 21r02r00         [12]  268 	ld	hl, #(_shadow_OAM + 2)
                                    269 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000011C 3E 01            [ 8]  270 	ld	a, #0x01
    0000011E 32               [ 8]  271 	ld	(hl-), a
    0000011F 2B               [ 8]  272 	dec	hl
                                    273 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    00000120 3E 50            [ 8]  274 	ld	a, #0x50
    00000122 22               [ 8]  275 	ld	(hl+), a
    00000123 36 50            [12]  276 	ld	(hl), #0x50
                                    277 ;dog_sprite2.h:14: move_sprite(0, 80, 80); // Position auf dem Bildschirm
                                    278 ;dog_sprite2.h:15: }
    00000125 C9               [16]  279 	ret
                                    280 ;dog_sprite2.h:17: void setup_dog_sprite_main(void) {
                                    281 ;	---------------------------------
                                    282 ; Function setup_dog_sprite_main
                                    283 ; ---------------------------------
    00000126                        284 _setup_dog_sprite_main::
    00000126 E8 F7            [16]  285 	add	sp, #-9
                                    286 ;dog_sprite2.h:21: uint8_t sprite_index = 0;
    00000128 0E 00            [ 8]  287 	ld	c, #0x00
                                    288 ;dog_sprite2.h:25: set_sprite_data(0, 19, Poodle2_tiles);
    0000012A 11r00r00         [12]  289 	ld	de, #_Poodle2_tiles
    0000012D D5               [16]  290 	push	de
    0000012E 21 00 13         [12]  291 	ld	hl, #0x1300
    00000131 E5               [16]  292 	push	hl
    00000132 CDr00r00         [24]  293 	call	_set_sprite_data
    00000135 E8 04            [16]  294 	add	sp, #4
                                    295 ;dog_sprite2.h:29: for (uint8_t row = 0; row < 5; row++) {
    00000137 F8 06            [12]  296 	ldhl	sp,	#6
    00000139 36 00            [12]  297 	ld	(hl), #0x00
    0000013B                        298 00113$:
    0000013B F8 06            [12]  299 	ldhl	sp,	#6
    0000013D 7E               [ 8]  300 	ld	a, (hl)
    0000013E D6 05            [ 8]  301 	sub	a, #0x05
    00000140 D2rCDr01         [16]  302 	jp	NC, 00106$
                                    303 ;dog_sprite2.h:30: for (uint8_t col = 0; col < 5; col++) {
    00000143 23               [ 8]  304 	inc	hl
    00000144 79               [ 4]  305 	ld	a, c
    00000145 22               [ 8]  306 	ld	(hl+), a
    00000146 36 00            [12]  307 	ld	(hl), #0x00
    00000148                        308 00110$:
    00000148 F8 08            [12]  309 	ldhl	sp,	#8
    0000014A 7E               [ 8]  310 	ld	a, (hl)
    0000014B D6 05            [ 8]  311 	sub	a, #0x05
    0000014D 30 71            [12]  312 	jr	NC, 00123$
                                    313 ;dog_sprite2.h:31: uint8_t tile_id = Poodle2_map[row * 5 + col];
    0000014F 2B               [ 8]  314 	dec	hl
    00000150 2B               [ 8]  315 	dec	hl
    00000151 2A               [ 8]  316 	ld	a, (hl+)
    00000152 23               [ 8]  317 	inc	hl
    00000153 4F               [ 4]  318 	ld	c, a
    00000154 87               [ 4]  319 	add	a, a
    00000155 87               [ 4]  320 	add	a, a
    00000156 81               [ 4]  321 	add	a, c
    00000157 46               [ 8]  322 	ld	b, (hl)
    00000158 80               [ 4]  323 	add	a, b
    00000159 6F               [ 4]  324 	ld	l, a
    0000015A 26 00            [ 8]  325 	ld	h, #0x00
    0000015C 11r00r00         [12]  326 	ld	de, #_Poodle2_map
    0000015F 19               [ 8]  327 	add	hl, de
    00000160 46               [ 8]  328 	ld	b, (hl)
                                    329 ;dog_sprite2.h:32: uint8_t sprite_x = dog_x + (col * 8); // 8 Pixel pro Tile
    00000161 F8 08            [12]  330 	ldhl	sp,	#8
    00000163 7E               [ 8]  331 	ld	a, (hl)
    00000164 87               [ 4]  332 	add	a, a
    00000165 87               [ 4]  333 	add	a, a
    00000166 87               [ 4]  334 	add	a, a
    00000167 C6 50            [ 8]  335 	add	a, #0x50
    00000169 F8 02            [12]  336 	ldhl	sp,	#2
                                    337 ;dog_sprite2.h:33: uint8_t sprite_y = dog_y + (row * 8);
    0000016B 22               [ 8]  338 	ld	(hl+), a
    0000016C 79               [ 4]  339 	ld	a, c
    0000016D 87               [ 4]  340 	add	a, a
    0000016E 87               [ 4]  341 	add	a, a
    0000016F 87               [ 4]  342 	add	a, a
    00000170 C6 48            [ 8]  343 	add	a, #0x48
    00000172 77               [ 8]  344 	ld	(hl), a
                                    345 ;c:\gbdk\include\gb\gb.h:1887: shadow_OAM[nb].tile=tile;
    00000173 F8 07            [12]  346 	ldhl	sp,	#7
    00000175 4E               [ 8]  347 	ld	c, (hl)
    00000176 AF               [ 4]  348 	xor	a, a
    00000177 CB 21            [ 8]  349 	sla	c
    00000179 8F               [ 4]  350 	adc	a, a
    0000017A CB 21            [ 8]  351 	sla	c
    0000017C 8F               [ 4]  352 	adc	a, a
    0000017D F8 00            [12]  353 	ldhl	sp,	#0
    0000017F 71               [ 8]  354 	ld	(hl), c
    00000180 23               [ 8]  355 	inc	hl
    00000181 77               [ 8]  356 	ld	(hl), a
    00000182 11r00r00         [12]  357 	ld	de, #_shadow_OAM
    00000185 E1               [12]  358 	pop	hl
    00000186 E5               [16]  359 	push	hl
    00000187 19               [ 8]  360 	add	hl, de
    00000188 23               [ 8]  361 	inc	hl
    00000189 23               [ 8]  362 	inc	hl
    0000018A 5D               [ 4]  363 	ld	e, l
    0000018B 54               [ 4]  364 	ld	d, h
    0000018C 78               [ 4]  365 	ld	a, b
    0000018D 12               [ 8]  366 	ld	(de), a
                                    367 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000018E 11r00r00         [12]  368 	ld	de, #_shadow_OAM
    00000191 E1               [12]  369 	pop	hl
    00000192 E5               [16]  370 	push	hl
    00000193 19               [ 8]  371 	add	hl, de
    00000194 E5               [16]  372 	push	hl
    00000195 7D               [ 4]  373 	ld	a, l
    00000196 F8 06            [12]  374 	ldhl	sp,	#6
    00000198 77               [ 8]  375 	ld	(hl), a
    00000199 E1               [12]  376 	pop	hl
    0000019A 7C               [ 4]  377 	ld	a, h
    0000019B F8 05            [12]  378 	ldhl	sp,	#5
                                    379 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    0000019D 32               [ 8]  380 	ld	(hl-), a
    0000019E 2A               [ 8]  381 	ld	a, (hl+)
    0000019F 5F               [ 4]  382 	ld	e, a
    000001A0 3A               [ 8]  383 	ld	a, (hl-)
    000001A1 2B               [ 8]  384 	dec	hl
    000001A2 57               [ 4]  385 	ld	d, a
    000001A3 2A               [ 8]  386 	ld	a, (hl+)
    000001A4 12               [ 8]  387 	ld	(de), a
    000001A5 2A               [ 8]  388 	ld	a, (hl+)
    000001A6 5F               [ 4]  389 	ld	e, a
    000001A7 56               [ 8]  390 	ld	d, (hl)
    000001A8 6B               [ 4]  391 	ld	l, e
    000001A9 62               [ 4]  392 	ld	h, d
    000001AA 23               [ 8]  393 	inc	hl
    000001AB 33               [ 8]  394 	inc	sp
    000001AC 33               [ 8]  395 	inc	sp
    000001AD 5D               [ 4]  396 	ld	e, l
    000001AE 54               [ 4]  397 	ld	d, h
    000001AF D5               [16]  398 	push	de
    000001B0 F8 02            [12]  399 	ldhl	sp,	#2
    000001B2 7E               [ 8]  400 	ld	a, (hl)
    000001B3 12               [ 8]  401 	ld	(de), a
                                    402 ;dog_sprite2.h:39: sprite_index++;
    000001B4 F8 07            [12]  403 	ldhl	sp,	#7
    000001B6 34               [12]  404 	inc	(hl)
                                    405 ;dog_sprite2.h:42: if (sprite_index >= 40) break; // Game Boy hat maximal 40 Sprites
    000001B7 7E               [ 8]  406 	ld	a, (hl)
    000001B8 D6 28            [ 8]  407 	sub	a, #0x28
    000001BA 30 04            [12]  408 	jr	NC, 00123$
                                    409 ;dog_sprite2.h:30: for (uint8_t col = 0; col < 5; col++) {
    000001BC 23               [ 8]  410 	inc	hl
    000001BD 34               [12]  411 	inc	(hl)
    000001BE 18 88            [12]  412 	jr	00110$
    000001C0                        413 00123$:
    000001C0 F8 07            [12]  414 	ldhl	sp,	#7
    000001C2 4E               [ 8]  415 	ld	c, (hl)
                                    416 ;dog_sprite2.h:44: if (sprite_index >= 40) break;
    000001C3 7E               [ 8]  417 	ld	a, (hl)
    000001C4 D6 28            [ 8]  418 	sub	a, #0x28
    000001C6 30 05            [12]  419 	jr	NC, 00106$
                                    420 ;dog_sprite2.h:29: for (uint8_t row = 0; row < 5; row++) {
    000001C8 2B               [ 8]  421 	dec	hl
    000001C9 34               [12]  422 	inc	(hl)
    000001CA C3r3Br01         [16]  423 	jp	00113$
    000001CD                        424 00106$:
                                    425 ;dog_sprite2.h:48: SHOW_SPRITES;
    000001CD F0r00            [12]  426 	ldh	a, (_LCDC_REG + 0)
    000001CF F6 02            [ 8]  427 	or	a, #0x02
    000001D1 E0r00            [12]  428 	ldh	(_LCDC_REG + 0), a
                                    429 ;dog_sprite2.h:49: }
    000001D3 E8 09            [16]  430 	add	sp, #9
    000001D5 C9               [16]  431 	ret
                                    432 ;main.c:11: void show_selection_menu()
                                    433 ;	---------------------------------
                                    434 ; Function show_selection_menu
                                    435 ; ---------------------------------
    000001D6                        436 _show_selection_menu::
                                    437 ;main.c:16: setup_dog2_sprite_selection();
    000001D6 CDr00r00         [24]  438 	call	_setup_dog2_sprite_selection
                                    439 ;main.c:19: setup_cat_sprite_selection();
    000001D9 CDr00r00         [24]  440 	call	_setup_cat_sprite_selection
                                    441 ;main.c:22: SHOW_SPRITES;
    000001DC F0r00            [12]  442 	ldh	a, (_LCDC_REG + 0)
    000001DE F6 02            [ 8]  443 	or	a, #0x02
    000001E0 E0r00            [12]  444 	ldh	(_LCDC_REG + 0), a
                                    445 ;main.c:24: cls();
    000001E2 CDr00r00         [24]  446 	call	_cls
                                    447 ;main.c:30: printf("Press A or B\n to select!\n");
    000001E5 11rEBr01         [12]  448 	ld	de, #___str_15
                                    449 ;main.c:31: }
    000001E8 C3r00r00         [16]  450 	jp	_puts
    000001EB                        451 ___str_15:
    000001EB 0A                     452 	.db 0x0a
    000001EC 3D 3D 20 50 45 54 20   453 	.ascii "== PET SELECTION =="
             53 45 4C 45 43 54 49
             4F 4E 20 3D 3D
    000001FF 0A                     454 	.db 0x0a
    00000200 0A                     455 	.db 0x0a
    00000201 0A                     456 	.db 0x0a
    00000202 0A                     457 	.db 0x0a
    00000203 0A                     458 	.db 0x0a
    00000204 0A                     459 	.db 0x0a
    00000205 0A                     460 	.db 0x0a
    00000206 0A                     461 	.db 0x0a
    00000207 20 20 20 50 4F 4F 44   462 	.ascii "   POODLE      CAT"
             4C 45 20 20 20 20 20
             20 43 41 54
    00000219 0A                     463 	.db 0x0a
    0000021A 0A                     464 	.db 0x0a
    0000021B 50 72 65 73 73 20 41   465 	.ascii "Press A or B"
             20 6F 72 20 42
    00000227 0A                     466 	.db 0x0a
    00000228 20 74 6F 20 73 65 6C   467 	.ascii " to select!"
             65 63 74 21
    00000233 00                     468 	.db 0x00
                                    469 ;main.c:33: void setup_pet_sprite()
                                    470 ;	---------------------------------
                                    471 ; Function setup_pet_sprite
                                    472 ; ---------------------------------
    00000234                        473 _setup_pet_sprite::
                                    474 ;main.c:36: for (UBYTE i = 0; i < 15; i++)
    00000234 0E 00            [ 8]  475 	ld	c, #0x00
    00000236                        476 00107$:
    00000236 79               [ 4]  477 	ld	a, c
    00000237 D6 0F            [ 8]  478 	sub	a, #0x0f
    00000239 30 0F            [12]  479 	jr	NC, 00101$
                                    480 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000023B 11r00r00         [12]  481 	ld	de, #_shadow_OAM+0
    0000023E 69               [ 4]  482 	ld	l, c
    0000023F AF               [ 4]  483 	xor	a, a
    00000240 67               [ 4]  484 	ld	h, a
    00000241 29               [ 8]  485 	add	hl, hl
    00000242 29               [ 8]  486 	add	hl, hl
    00000243 19               [ 8]  487 	add	hl, de
                                    488 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    00000244 AF               [ 4]  489 	xor	a, a
    00000245 22               [ 8]  490 	ld	(hl+), a
    00000246 77               [ 8]  491 	ld	(hl), a
                                    492 ;main.c:36: for (UBYTE i = 0; i < 15; i++)
    00000247 0C               [ 4]  493 	inc	c
    00000248 18 EC            [12]  494 	jr	00107$
    0000024A                        495 00101$:
                                    496 ;main.c:41: if (selected_pet == 0)
    0000024A 21rF0r00         [12]  497 	ld	hl, #_selected_pet
    0000024D 7E               [ 8]  498 	ld	a, (hl)
    0000024E B7               [ 4]  499 	or	a, a
    0000024F C2r83r00         [16]  500 	jp	NZ, _setup_cat_sprite_main
                                    501 ;main.c:44: setup_dog2_sprite_main();
                                    502 ;main.c:50: setup_cat_sprite_main();
                                    503 ;main.c:52: }
    00000252 C3r00r00         [16]  504 	jp	_setup_dog2_sprite_main
                                    505 ;main.c:54: const char *get_pet_name()
                                    506 ;	---------------------------------
                                    507 ; Function get_pet_name
                                    508 ; ---------------------------------
    00000255                        509 _get_pet_name::
                                    510 ;main.c:56: return (selected_pet == 0) ? "POODLE" : "KITTY";
    00000255 FArF0r00         [16]  511 	ld	a, (#_selected_pet)
    00000258 B7               [ 4]  512 	or	a, a
    00000259 20 04            [12]  513 	jr	NZ, 00103$
    0000025B 01r63r02         [12]  514 	ld	bc, #___str_16+0
    0000025E C9               [16]  515 	ret
    0000025F                        516 00103$:
    0000025F 01r6Ar02         [12]  517 	ld	bc, #___str_17+0
                                    518 ;main.c:57: }
    00000262 C9               [16]  519 	ret
    00000263                        520 ___str_16:
    00000263 50 4F 4F 44 4C 45      521 	.ascii "POODLE"
    00000269 00                     522 	.db 0x00
    0000026A                        523 ___str_17:
    0000026A 4B 49 54 54 59         524 	.ascii "KITTY"
    0000026F 00                     525 	.db 0x00
                                    526 ;main.c:59: const char *get_feed_message()
                                    527 ;	---------------------------------
                                    528 ; Function get_feed_message
                                    529 ; ---------------------------------
    00000270                        530 _get_feed_message::
                                    531 ;main.c:61: return (selected_pet == 0) ? "*munch munch* Woof!" : "*purr purr* Meow!";
    00000270 FArF0r00         [16]  532 	ld	a, (#_selected_pet)
    00000273 B7               [ 4]  533 	or	a, a
    00000274 20 04            [12]  534 	jr	NZ, 00103$
    00000276 01r7Er02         [12]  535 	ld	bc, #___str_18+0
    00000279 C9               [16]  536 	ret
    0000027A                        537 00103$:
    0000027A 01r92r02         [12]  538 	ld	bc, #___str_19+0
                                    539 ;main.c:62: }
    0000027D C9               [16]  540 	ret
    0000027E                        541 ___str_18:
    0000027E 2A 6D 75 6E 63 68 20   542 	.ascii "*munch munch* Woof!"
             6D 75 6E 63 68 2A 20
             57 6F 6F 66 21
    00000291 00                     543 	.db 0x00
    00000292                        544 ___str_19:
    00000292 2A 70 75 72 72 20 70   545 	.ascii "*purr purr* Meow!"
             75 72 72 2A 20 4D 65
             6F 77 21
    000002A3 00                     546 	.db 0x00
                                    547 ;main.c:64: const char *get_play_message()
                                    548 ;	---------------------------------
                                    549 ; Function get_play_message
                                    550 ; ---------------------------------
    000002A4                        551 _get_play_message::
                                    552 ;main.c:66: return (selected_pet == 0) ? "*woof woof* Fun!" : "*meow* Playful!";
    000002A4 FArF0r00         [16]  553 	ld	a, (#_selected_pet)
    000002A7 B7               [ 4]  554 	or	a, a
    000002A8 20 04            [12]  555 	jr	NZ, 00103$
    000002AA 01rB2r02         [12]  556 	ld	bc, #___str_20+0
    000002AD C9               [16]  557 	ret
    000002AE                        558 00103$:
    000002AE 01rC3r02         [12]  559 	ld	bc, #___str_21+0
                                    560 ;main.c:67: }
    000002B1 C9               [16]  561 	ret
    000002B2                        562 ___str_20:
    000002B2 2A 77 6F 6F 66 20 77   563 	.ascii "*woof woof* Fun!"
             6F 6F 66 2A 20 46 75
             6E 21
    000002C2 00                     564 	.db 0x00
    000002C3                        565 ___str_21:
    000002C3 2A 6D 65 6F 77 2A 20   566 	.ascii "*meow* Playful!"
             50 6C 61 79 66 75 6C
             21
    000002D2 00                     567 	.db 0x00
                                    568 ;main.c:69: const char *get_up_message()
                                    569 ;	---------------------------------
                                    570 ; Function get_up_message
                                    571 ; ---------------------------------
    000002D3                        572 _get_up_message::
                                    573 ;main.c:71: return (selected_pet == 0) ? "*looks up curiously*" : "*ears perk up*";
    000002D3 FArF0r00         [16]  574 	ld	a, (#_selected_pet)
    000002D6 B7               [ 4]  575 	or	a, a
    000002D7 20 04            [12]  576 	jr	NZ, 00103$
    000002D9 01rE1r02         [12]  577 	ld	bc, #___str_22+0
    000002DC C9               [16]  578 	ret
    000002DD                        579 00103$:
    000002DD 01rF6r02         [12]  580 	ld	bc, #___str_23+0
                                    581 ;main.c:72: }
    000002E0 C9               [16]  582 	ret
    000002E1                        583 ___str_22:
    000002E1 2A 6C 6F 6F 6B 73 20   584 	.ascii "*looks up curiously*"
             75 70 20 63 75 72 69
             6F 75 73 6C 79 2A
    000002F5 00                     585 	.db 0x00
    000002F6                        586 ___str_23:
    000002F6 2A 65 61 72 73 20 70   587 	.ascii "*ears perk up*"
             65 72 6B 20 75 70 2A
    00000304 00                     588 	.db 0x00
                                    589 ;main.c:74: const char *get_down_message()
                                    590 ;	---------------------------------
                                    591 ; Function get_down_message
                                    592 ; ---------------------------------
    00000305                        593 _get_down_message::
                                    594 ;main.c:76: return (selected_pet == 0) ? "*sniffs the ground*" : "*sniffs around*";
    00000305 FArF0r00         [16]  595 	ld	a, (#_selected_pet)
    00000308 B7               [ 4]  596 	or	a, a
    00000309 20 04            [12]  597 	jr	NZ, 00103$
    0000030B 01r13r03         [12]  598 	ld	bc, #___str_24+0
    0000030E C9               [16]  599 	ret
    0000030F                        600 00103$:
    0000030F 01r27r03         [12]  601 	ld	bc, #___str_25+0
                                    602 ;main.c:77: }
    00000312 C9               [16]  603 	ret
    00000313                        604 ___str_24:
    00000313 2A 73 6E 69 66 66 73   605 	.ascii "*sniffs the ground*"
             20 74 68 65 20 67 72
             6F 75 6E 64 2A
    00000326 00                     606 	.db 0x00
    00000327                        607 ___str_25:
    00000327 2A 73 6E 69 66 66 73   608 	.ascii "*sniffs around*"
             20 61 72 6F 75 6E 64
             2A
    00000336 00                     609 	.db 0x00
                                    610 ;main.c:79: const char *get_left_message()
                                    611 ;	---------------------------------
                                    612 ; Function get_left_message
                                    613 ; ---------------------------------
    00000337                        614 _get_left_message::
                                    615 ;main.c:81: return (selected_pet == 0) ? "*turns left*" : "*stretches left*";
    00000337 FArF0r00         [16]  616 	ld	a, (#_selected_pet)
    0000033A B7               [ 4]  617 	or	a, a
    0000033B 20 04            [12]  618 	jr	NZ, 00103$
    0000033D 01r45r03         [12]  619 	ld	bc, #___str_26+0
    00000340 C9               [16]  620 	ret
    00000341                        621 00103$:
    00000341 01r52r03         [12]  622 	ld	bc, #___str_27+0
                                    623 ;main.c:82: }
    00000344 C9               [16]  624 	ret
    00000345                        625 ___str_26:
    00000345 2A 74 75 72 6E 73 20   626 	.ascii "*turns left*"
             6C 65 66 74 2A
    00000351 00                     627 	.db 0x00
    00000352                        628 ___str_27:
    00000352 2A 73 74 72 65 74 63   629 	.ascii "*stretches left*"
             68 65 73 20 6C 65 66
             74 2A
    00000362 00                     630 	.db 0x00
                                    631 ;main.c:84: const char *get_right_message()
                                    632 ;	---------------------------------
                                    633 ; Function get_right_message
                                    634 ; ---------------------------------
    00000363                        635 _get_right_message::
                                    636 ;main.c:86: return (selected_pet == 0) ? "*turns right*" : "*stretches right*";
    00000363 FArF0r00         [16]  637 	ld	a, (#_selected_pet)
    00000366 B7               [ 4]  638 	or	a, a
    00000367 20 04            [12]  639 	jr	NZ, 00103$
    00000369 01r71r03         [12]  640 	ld	bc, #___str_28+0
    0000036C C9               [16]  641 	ret
    0000036D                        642 00103$:
    0000036D 01r7Fr03         [12]  643 	ld	bc, #___str_29+0
                                    644 ;main.c:87: }
    00000370 C9               [16]  645 	ret
    00000371                        646 ___str_28:
    00000371 2A 74 75 72 6E 73 20   647 	.ascii "*turns right*"
             72 69 67 68 74 2A
    0000037E 00                     648 	.db 0x00
    0000037F                        649 ___str_29:
    0000037F 2A 73 74 72 65 74 63   650 	.ascii "*stretches right*"
             68 65 73 20 72 69 67
             68 74 2A
    00000390 00                     651 	.db 0x00
                                    652 ;main.c:89: void main()
                                    653 ;	---------------------------------
                                    654 ; Function main
                                    655 ; ---------------------------------
    00000391                        656 _main::
    00000391 E8 FB            [16]  657 	add	sp, #-5
                                    658 ;main.c:91: DISPLAY_ON;
    00000393 F0r00            [12]  659 	ldh	a, (_LCDC_REG + 0)
    00000395 F6 80            [ 8]  660 	or	a, #0x80
    00000397 E0r00            [12]  661 	ldh	(_LCDC_REG + 0), a
                                    662 ;main.c:93: show_selection_menu();
    00000399 CDrD6r01         [24]  663 	call	_show_selection_menu
                                    664 ;main.c:97: while (1)
    0000039C                        665 00106$:
                                    666 ;main.c:99: mButtons = joypad();
    0000039C CDr00r00         [24]  667 	call	_joypad
                                    668 ;main.c:101: if (mButtons & J_A)
    0000039F CB 67            [ 8]  669 	bit	4, a
    000003A1 28 06            [12]  670 	jr	Z, 00102$
                                    671 ;main.c:103: selected_pet = 0; // Dog
    000003A3 AF               [ 4]  672 	xor	a, a
    000003A4 EArF0r00         [16]  673 	ld	(#_selected_pet),a
                                    674 ;main.c:104: break;
    000003A7 18 10            [12]  675 	jr	00108$
    000003A9                        676 00102$:
                                    677 ;main.c:107: if (mButtons & J_B)
    000003A9 CB 6F            [ 8]  678 	bit	5, a
    000003AB 28 07            [12]  679 	jr	Z, 00104$
                                    680 ;main.c:109: selected_pet = 1; // Cat
    000003AD 21rF0r00         [12]  681 	ld	hl, #_selected_pet
    000003B0 36 01            [12]  682 	ld	(hl), #0x01
                                    683 ;main.c:110: break;
    000003B2 18 05            [12]  684 	jr	00108$
    000003B4                        685 00104$:
                                    686 ;main.c:113: wait_vbl_done();
    000003B4 CDr00r00         [24]  687 	call	_wait_vbl_done
    000003B7 18 E3            [12]  688 	jr	00106$
                                    689 ;main.c:117: while (joypad())
    000003B9                        690 00108$:
    000003B9 CDr00r00         [24]  691 	call	_joypad
    000003BC B7               [ 4]  692 	or	a, a
    000003BD 20 FA            [12]  693 	jr	NZ, 00108$
                                    694 ;main.c:120: setup_pet_sprite();
    000003BF CDr34r02         [24]  695 	call	_setup_pet_sprite
                                    696 ;main.c:121: SHOW_SPRITES;
    000003C2 F0r00            [12]  697 	ldh	a, (_LCDC_REG + 0)
    000003C4 F6 02            [ 8]  698 	or	a, #0x02
    000003C6 E0r00            [12]  699 	ldh	(_LCDC_REG + 0), a
                                    700 ;main.c:124: cls();
    000003C8 CDr00r00         [24]  701 	call	_cls
                                    702 ;main.c:126: UBYTE happiness = 50;
    000003CB F8 02            [12]  703 	ldhl	sp,	#2
                                    704 ;main.c:127: UBYTE hunger = 30;
    000003CD 3E 32            [ 8]  705 	ld	a, #0x32
    000003CF 22               [ 8]  706 	ld	(hl+), a
                                    707 ;main.c:128: UBYTE energy = 70;
    000003D0 3E 1E            [ 8]  708 	ld	a, #0x1e
    000003D2 22               [ 8]  709 	ld	(hl+), a
    000003D3 36 46            [12]  710 	ld	(hl), #0x46
                                    711 ;main.c:131: printf("=== TAMAGOTCHI ===\n");
    000003D5 11r54r08         [12]  712 	ld	de, #___str_79
    000003D8 CDr00r00         [24]  713 	call	_puts
                                    714 ;main.c:132: printf("Your %s is ready!\n", get_pet_name());
    000003DB CDr55r02         [24]  715 	call	_get_pet_name
    000003DE C5               [16]  716 	push	bc
    000003DF 11r76r06         [12]  717 	ld	de, #___str_34
    000003E2 D5               [16]  718 	push	de
    000003E3 CDr00r00         [24]  719 	call	_printf
    000003E6 E8 04            [16]  720 	add	sp, #4
                                    721 ;main.c:133: printf("\n\n\n\n\n\n");
    000003E8 11r89r06         [12]  722 	ld	de, #___str_36
    000003EB CDr00r00         [24]  723 	call	_puts
                                    724 ;main.c:134: printf("Happiness: %d\n", happiness);
    000003EE 11 32 00         [12]  725 	ld	de, #0x0032
    000003F1 D5               [16]  726 	push	de
    000003F2 11r8Fr06         [12]  727 	ld	de, #___str_37
    000003F5 D5               [16]  728 	push	de
    000003F6 CDr00r00         [24]  729 	call	_printf
    000003F9 E8 04            [16]  730 	add	sp, #4
                                    731 ;main.c:135: printf("Hunger: %d\n", hunger);
    000003FB 11 1E 00         [12]  732 	ld	de, #0x001e
    000003FE D5               [16]  733 	push	de
    000003FF 11r9Er06         [12]  734 	ld	de, #___str_38
    00000402 D5               [16]  735 	push	de
    00000403 CDr00r00         [24]  736 	call	_printf
    00000406 E8 04            [16]  737 	add	sp, #4
                                    738 ;main.c:136: printf("Energy: %d\n", energy);
    00000408 11 46 00         [12]  739 	ld	de, #0x0046
    0000040B D5               [16]  740 	push	de
    0000040C 11rAAr06         [12]  741 	ld	de, #___str_39
    0000040F D5               [16]  742 	push	de
    00000410 CDr00r00         [24]  743 	call	_printf
    00000413 E8 04            [16]  744 	add	sp, #4
                                    745 ;main.c:138: while (1)
    00000415                        746 00191$:
                                    747 ;main.c:140: mButtons = joypad();
    00000415 CDr00r00         [24]  748 	call	_joypad
    00000418 F8 01            [12]  749 	ldhl	sp,	#1
    0000041A 77               [ 8]  750 	ld	(hl), a
                                    751 ;main.c:142: if (mButtons & J_A)
    0000041B E5               [16]  752 	push	hl
    0000041C CB 66            [12]  753 	bit	4, (hl)
    0000041E E1               [12]  754 	pop	hl
    0000041F 28 3E            [12]  755 	jr	Z, 00119$
                                    756 ;main.c:144: if (hunger > 0)
    00000421 F8 03            [12]  757 	ldhl	sp,	#3
    00000423 7E               [ 8]  758 	ld	a, (hl)
    00000424 B7               [ 4]  759 	or	a, a
    00000425 28 32            [12]  760 	jr	Z, 00116$
                                    761 ;main.c:146: hunger -= 15;
    00000427 7E               [ 8]  762 	ld	a, (hl)
    00000428 C6 F1            [ 8]  763 	add	a, #0xf1
                                    764 ;main.c:149: happiness += 5;
    0000042A 32               [ 8]  765 	ld	(hl-), a
    0000042B 7E               [ 8]  766 	ld	a, (hl)
    0000042C C6 05            [ 8]  767 	add	a, #0x05
    0000042E 77               [ 8]  768 	ld	(hl), a
                                    769 ;main.c:150: if (happiness > 100)
    0000042F 3E 64            [ 8]  770 	ld	a, #0x64
    00000431 96               [ 8]  771 	sub	a, (hl)
    00000432 30 02            [12]  772 	jr	NC, 00114$
                                    773 ;main.c:151: happiness = 100;
    00000434 36 64            [12]  774 	ld	(hl), #0x64
    00000436                        775 00114$:
                                    776 ;main.c:152: printf("%s\n", get_feed_message());
    00000436 CDr70r02         [24]  777 	call	_get_feed_message
    00000439 C5               [16]  778 	push	bc
    0000043A 11rB6r06         [12]  779 	ld	de, #___str_40
    0000043D D5               [16]  780 	push	de
    0000043E CDr00r00         [24]  781 	call	_printf
    00000441 E8 04            [16]  782 	add	sp, #4
                                    783 ;main.c:153: printf("Hunger: %d Happiness: %d\n", hunger, happiness);
    00000443 F8 02            [12]  784 	ldhl	sp,	#2
    00000445 2A               [ 8]  785 	ld	a, (hl+)
    00000446 5F               [ 4]  786 	ld	e, a
    00000447 16 00            [ 8]  787 	ld	d, #0x00
    00000449 4E               [ 8]  788 	ld	c, (hl)
    0000044A 06 00            [ 8]  789 	ld	b, #0x00
    0000044C 21rBAr06         [12]  790 	ld	hl, #___str_41
    0000044F D5               [16]  791 	push	de
    00000450 C5               [16]  792 	push	bc
    00000451 E5               [16]  793 	push	hl
    00000452 CDr00r00         [24]  794 	call	_printf
    00000455 E8 06            [16]  795 	add	sp, #6
    00000457 18 06            [12]  796 	jr	00119$
    00000459                        797 00116$:
                                    798 ;main.c:157: printf("Not hungry right now!\n");
    00000459 11rD4r06         [12]  799 	ld	de, #___str_43
    0000045C CDr00r00         [24]  800 	call	_puts
    0000045F                        801 00119$:
                                    802 ;main.c:161: if (mButtons & J_B)
    0000045F E5               [16]  803 	push	hl
    00000460 F8 03            [12]  804 	ldhl	sp,	#3
    00000462 CB 6E            [12]  805 	bit	5, (hl)
    00000464 E1               [12]  806 	pop	hl
    00000465 28 4F            [12]  807 	jr	Z, 00128$
                                    808 ;main.c:164: if (energy > 10)
    00000467 3E 0A            [ 8]  809 	ld	a, #0x0a
    00000469 F8 04            [12]  810 	ldhl	sp,	#4
    0000046B 96               [ 8]  811 	sub	a, (hl)
    0000046C 30 42            [12]  812 	jr	NC, 00125$
                                    813 ;main.c:166: happiness += 10;
    0000046E 2B               [ 8]  814 	dec	hl
    0000046F 2B               [ 8]  815 	dec	hl
    00000470 7E               [ 8]  816 	ld	a, (hl)
    00000471 C6 0A            [ 8]  817 	add	a, #0x0a
    00000473 77               [ 8]  818 	ld	(hl), a
                                    819 ;main.c:167: if (happiness > 100)
    00000474 3E 64            [ 8]  820 	ld	a, #0x64
    00000476 96               [ 8]  821 	sub	a, (hl)
    00000477 30 02            [12]  822 	jr	NC, 00121$
                                    823 ;main.c:168: happiness = 100;
    00000479 36 64            [12]  824 	ld	(hl), #0x64
    0000047B                        825 00121$:
                                    826 ;main.c:169: energy -= 10;
    0000047B F8 04            [12]  827 	ldhl	sp,	#4
    0000047D 7E               [ 8]  828 	ld	a, (hl)
    0000047E C6 F6            [ 8]  829 	add	a, #0xf6
                                    830 ;main.c:170: hunger += 5;
    00000480 32               [ 8]  831 	ld	(hl-), a
    00000481 7E               [ 8]  832 	ld	a, (hl)
    00000482 C6 05            [ 8]  833 	add	a, #0x05
    00000484 77               [ 8]  834 	ld	(hl), a
                                    835 ;main.c:171: if (hunger > 100)
    00000485 3E 64            [ 8]  836 	ld	a, #0x64
    00000487 96               [ 8]  837 	sub	a, (hl)
    00000488 30 02            [12]  838 	jr	NC, 00123$
                                    839 ;main.c:172: hunger = 100;
    0000048A 36 64            [12]  840 	ld	(hl), #0x64
    0000048C                        841 00123$:
                                    842 ;main.c:174: printf("%s\n", get_play_message());
    0000048C CDrA4r02         [24]  843 	call	_get_play_message
    0000048F 11rB6r06         [12]  844 	ld	de, #___str_40+0
    00000492 C5               [16]  845 	push	bc
    00000493 D5               [16]  846 	push	de
    00000494 CDr00r00         [24]  847 	call	_printf
    00000497 E8 04            [16]  848 	add	sp, #4
                                    849 ;main.c:175: printf("Energy: %d Happiness: %d\n", energy, happiness);
    00000499 F8 02            [12]  850 	ldhl	sp,	#2
    0000049B 2A               [ 8]  851 	ld	a, (hl+)
    0000049C 23               [ 8]  852 	inc	hl
    0000049D 5F               [ 4]  853 	ld	e, a
    0000049E 16 00            [ 8]  854 	ld	d, #0x00
    000004A0 4E               [ 8]  855 	ld	c, (hl)
    000004A1 06 00            [ 8]  856 	ld	b, #0x00
    000004A3 D5               [16]  857 	push	de
    000004A4 C5               [16]  858 	push	bc
    000004A5 11rEAr06         [12]  859 	ld	de, #___str_44
    000004A8 D5               [16]  860 	push	de
    000004A9 CDr00r00         [24]  861 	call	_printf
    000004AC E8 06            [16]  862 	add	sp, #6
    000004AE 18 06            [12]  863 	jr	00128$
    000004B0                        864 00125$:
                                    865 ;main.c:179: printf("Too tired to play...\n");
    000004B0 11r04r07         [12]  866 	ld	de, #___str_46
    000004B3 CDr00r00         [24]  867 	call	_puts
    000004B6                        868 00128$:
                                    869 ;main.c:183: if (mButtons & J_SELECT)
    000004B6 E5               [16]  870 	push	hl
    000004B7 F8 03            [12]  871 	ldhl	sp,	#3
    000004B9 CB 76            [12]  872 	bit	6, (hl)
    000004BB E1               [12]  873 	pop	hl
    000004BC 28 2F            [12]  874 	jr	Z, 00134$
                                    875 ;main.c:186: energy += 20;
    000004BE F8 04            [12]  876 	ldhl	sp,	#4
    000004C0 7E               [ 8]  877 	ld	a, (hl)
    000004C1 C6 14            [ 8]  878 	add	a, #0x14
    000004C3 77               [ 8]  879 	ld	(hl), a
                                    880 ;main.c:187: if (energy > 100)
    000004C4 3E 64            [ 8]  881 	ld	a, #0x64
    000004C6 96               [ 8]  882 	sub	a, (hl)
    000004C7 30 02            [12]  883 	jr	NC, 00130$
                                    884 ;main.c:188: energy = 100;
    000004C9 36 64            [12]  885 	ld	(hl), #0x64
    000004CB                        886 00130$:
                                    887 ;main.c:189: hunger += 3;
    000004CB F8 03            [12]  888 	ldhl	sp,	#3
    000004CD 7E               [ 8]  889 	ld	a, (hl)
    000004CE C6 03            [ 8]  890 	add	a, #0x03
    000004D0 77               [ 8]  891 	ld	(hl), a
                                    892 ;main.c:190: if (hunger > 100)
    000004D1 3E 64            [ 8]  893 	ld	a, #0x64
    000004D3 96               [ 8]  894 	sub	a, (hl)
    000004D4 30 02            [12]  895 	jr	NC, 00132$
                                    896 ;main.c:191: hunger = 100;
    000004D6 36 64            [12]  897 	ld	(hl), #0x64
    000004D8                        898 00132$:
                                    899 ;main.c:193: printf("*zzz* Good rest!\n");
    000004D8 11r19r07         [12]  900 	ld	de, #___str_48
    000004DB CDr00r00         [24]  901 	call	_puts
                                    902 ;main.c:194: printf("Energy: %d\n", energy);
    000004DE F8 04            [12]  903 	ldhl	sp,	#4
    000004E0 4E               [ 8]  904 	ld	c, (hl)
    000004E1 AF               [ 4]  905 	xor	a, a
    000004E2 47               [ 4]  906 	ld	b, a
    000004E3 C5               [16]  907 	push	bc
    000004E4 11rAAr06         [12]  908 	ld	de, #___str_39
    000004E7 D5               [16]  909 	push	de
    000004E8 CDr00r00         [24]  910 	call	_printf
    000004EB E8 04            [16]  911 	add	sp, #4
    000004ED                        912 00134$:
                                    913 ;main.c:197: if (mButtons & J_START)
    000004ED E5               [16]  914 	push	hl
    000004EE F8 03            [12]  915 	ldhl	sp,	#3
    000004F0 CB 7E            [12]  916 	bit	7, (hl)
    000004F2 E1               [12]  917 	pop	hl
    000004F3 CArD8r05         [16]  918 	jp	Z, 00166$
                                    919 ;main.c:199: printf("\n=== %s STATUS ===\n", get_pet_name());
    000004F6 CDr55r02         [24]  920 	call	_get_pet_name
    000004F9 C5               [16]  921 	push	bc
    000004FA 11r2Ar07         [12]  922 	ld	de, #___str_49
    000004FD D5               [16]  923 	push	de
    000004FE CDr00r00         [24]  924 	call	_printf
    00000501 E8 04            [16]  925 	add	sp, #4
                                    926 ;main.c:200: printf("Happiness: %d/100\n", happiness);
    00000503 F8 02            [12]  927 	ldhl	sp,	#2
    00000505 4E               [ 8]  928 	ld	c, (hl)
    00000506 06 00            [ 8]  929 	ld	b, #0x00
    00000508 C5               [16]  930 	push	bc
    00000509 11r3Er07         [12]  931 	ld	de, #___str_50
    0000050C D5               [16]  932 	push	de
    0000050D CDr00r00         [24]  933 	call	_printf
    00000510 E8 04            [16]  934 	add	sp, #4
                                    935 ;main.c:201: printf("Hunger: %d/100\n", hunger);
    00000512 F8 03            [12]  936 	ldhl	sp,	#3
    00000514 4E               [ 8]  937 	ld	c, (hl)
    00000515 06 00            [ 8]  938 	ld	b, #0x00
    00000517 C5               [16]  939 	push	bc
    00000518 11r51r07         [12]  940 	ld	de, #___str_51
    0000051B D5               [16]  941 	push	de
    0000051C CDr00r00         [24]  942 	call	_printf
    0000051F E8 04            [16]  943 	add	sp, #4
                                    944 ;main.c:202: printf("Energy: %d/100\n", energy);
    00000521 F8 04            [12]  945 	ldhl	sp,	#4
    00000523 4E               [ 8]  946 	ld	c, (hl)
    00000524 06 00            [ 8]  947 	ld	b, #0x00
    00000526 C5               [16]  948 	push	bc
    00000527 11r61r07         [12]  949 	ld	de, #___str_52
    0000052A D5               [16]  950 	push	de
    0000052B CDr00r00         [24]  951 	call	_printf
    0000052E E8 04            [16]  952 	add	sp, #4
                                    953 ;main.c:204: if (happiness > 80)
    00000530 3E 50            [ 8]  954 	ld	a, #0x50
    00000532 F8 02            [12]  955 	ldhl	sp,	#2
    00000534 96               [ 8]  956 	sub	a, (hl)
    00000535 30 08            [12]  957 	jr	NC, 00145$
                                    958 ;main.c:205: printf("Mood: Very Happy! :D\n");
    00000537 11r71r07         [12]  959 	ld	de, #___str_54
    0000053A CDr00r00         [24]  960 	call	_puts
    0000053D 18 33            [12]  961 	jr	00146$
    0000053F                        962 00145$:
                                    963 ;main.c:206: else if (happiness > 60)
    0000053F 3E 3C            [ 8]  964 	ld	a, #0x3c
    00000541 F8 02            [12]  965 	ldhl	sp,	#2
    00000543 96               [ 8]  966 	sub	a, (hl)
    00000544 30 08            [12]  967 	jr	NC, 00142$
                                    968 ;main.c:207: printf("Mood: Happy :)\n");
    00000546 11r86r07         [12]  969 	ld	de, #___str_56
    00000549 CDr00r00         [24]  970 	call	_puts
    0000054C 18 24            [12]  971 	jr	00146$
    0000054E                        972 00142$:
                                    973 ;main.c:208: else if (happiness > 40)
    0000054E 3E 28            [ 8]  974 	ld	a, #0x28
    00000550 F8 02            [12]  975 	ldhl	sp,	#2
    00000552 96               [ 8]  976 	sub	a, (hl)
    00000553 30 08            [12]  977 	jr	NC, 00139$
                                    978 ;main.c:209: printf("Mood: Okay :/\n");
    00000555 11r95r07         [12]  979 	ld	de, #___str_58
    00000558 CDr00r00         [24]  980 	call	_puts
    0000055B 18 15            [12]  981 	jr	00146$
    0000055D                        982 00139$:
                                    983 ;main.c:210: else if (happiness > 20)
    0000055D 3E 14            [ 8]  984 	ld	a, #0x14
    0000055F F8 02            [12]  985 	ldhl	sp,	#2
    00000561 96               [ 8]  986 	sub	a, (hl)
    00000562 30 08            [12]  987 	jr	NC, 00136$
                                    988 ;main.c:211: printf("Mood: Sad :(\n");
    00000564 11rA3r07         [12]  989 	ld	de, #___str_60
    00000567 CDr00r00         [24]  990 	call	_puts
    0000056A 18 06            [12]  991 	jr	00146$
    0000056C                        992 00136$:
                                    993 ;main.c:213: printf("Mood: Very Sad T_T\n");
    0000056C 11rB0r07         [12]  994 	ld	de, #___str_62
    0000056F CDr00r00         [24]  995 	call	_puts
    00000572                        996 00146$:
                                    997 ;main.c:215: if (hunger > 80)
    00000572 3E 50            [ 8]  998 	ld	a, #0x50
    00000574 F8 03            [12]  999 	ldhl	sp,	#3
    00000576 96               [ 8] 1000 	sub	a, (hl)
    00000577 30 08            [12] 1001 	jr	NC, 00154$
                                   1002 ;main.c:216: printf("Status: Very Hungry!\n");
    00000579 11rC3r07         [12] 1003 	ld	de, #___str_64
    0000057C CDr00r00         [24] 1004 	call	_puts
    0000057F 18 24            [12] 1005 	jr	00155$
    00000581                       1006 00154$:
                                   1007 ;main.c:217: else if (hunger > 50)
    00000581 3E 32            [ 8] 1008 	ld	a, #0x32
    00000583 F8 03            [12] 1009 	ldhl	sp,	#3
    00000585 96               [ 8] 1010 	sub	a, (hl)
    00000586 30 08            [12] 1011 	jr	NC, 00151$
                                   1012 ;main.c:218: printf("Status: Hungry\n");
    00000588 11rD8r07         [12] 1013 	ld	de, #___str_66
    0000058B CDr00r00         [24] 1014 	call	_puts
    0000058E 18 15            [12] 1015 	jr	00155$
    00000590                       1016 00151$:
                                   1017 ;main.c:219: else if (hunger > 20)
    00000590 3E 14            [ 8] 1018 	ld	a, #0x14
    00000592 F8 03            [12] 1019 	ldhl	sp,	#3
    00000594 96               [ 8] 1020 	sub	a, (hl)
    00000595 30 08            [12] 1021 	jr	NC, 00148$
                                   1022 ;main.c:220: printf("Status: A bit hungry\n");
    00000597 11rE7r07         [12] 1023 	ld	de, #___str_68
    0000059A CDr00r00         [24] 1024 	call	_puts
    0000059D 18 06            [12] 1025 	jr	00155$
    0000059F                       1026 00148$:
                                   1027 ;main.c:222: printf("Status: Well fed\n");
    0000059F 11rFCr07         [12] 1028 	ld	de, #___str_70
    000005A2 CDr00r00         [24] 1029 	call	_puts
    000005A5                       1030 00155$:
                                   1031 ;main.c:224: if (energy < 20)
    000005A5 F8 04            [12] 1032 	ldhl	sp,	#4
    000005A7 7E               [ 8] 1033 	ld	a, (hl)
    000005A8 D6 14            [ 8] 1034 	sub	a, #0x14
    000005AA 30 08            [12] 1035 	jr	NC, 00163$
                                   1036 ;main.c:225: printf("Energy: Exhausted\n");
    000005AC 11r0Dr08         [12] 1037 	ld	de, #___str_72
    000005AF CDr00r00         [24] 1038 	call	_puts
    000005B2 18 24            [12] 1039 	jr	00166$
    000005B4                       1040 00163$:
                                   1041 ;main.c:226: else if (energy < 50)
    000005B4 F8 04            [12] 1042 	ldhl	sp,	#4
    000005B6 7E               [ 8] 1043 	ld	a, (hl)
    000005B7 D6 32            [ 8] 1044 	sub	a, #0x32
    000005B9 30 08            [12] 1045 	jr	NC, 00160$
                                   1046 ;main.c:227: printf("Energy: Tired\n");
    000005BB 11r1Fr08         [12] 1047 	ld	de, #___str_74
    000005BE CDr00r00         [24] 1048 	call	_puts
    000005C1 18 15            [12] 1049 	jr	00166$
    000005C3                       1050 00160$:
                                   1051 ;main.c:228: else if (energy < 80)
    000005C3 F8 04            [12] 1052 	ldhl	sp,	#4
    000005C5 7E               [ 8] 1053 	ld	a, (hl)
    000005C6 D6 50            [ 8] 1054 	sub	a, #0x50
    000005C8 30 08            [12] 1055 	jr	NC, 00157$
                                   1056 ;main.c:229: printf("Energy: Normal\n");
    000005CA 11r2Dr08         [12] 1057 	ld	de, #___str_76
    000005CD CDr00r00         [24] 1058 	call	_puts
    000005D0 18 06            [12] 1059 	jr	00166$
    000005D2                       1060 00157$:
                                   1061 ;main.c:231: printf("Energy: Full of energy!\n");
    000005D2 11r3Cr08         [12] 1062 	ld	de, #___str_78
    000005D5 CDr00r00         [24] 1063 	call	_puts
    000005D8                       1064 00166$:
                                   1065 ;main.c:234: if (mButtons & J_UP)
    000005D8 E5               [16] 1066 	push	hl
    000005D9 F8 03            [12] 1067 	ldhl	sp,	#3
    000005DB CB 56            [12] 1068 	bit	2, (hl)
    000005DD E1               [12] 1069 	pop	hl
    000005DE 28 0D            [12] 1070 	jr	Z, 00168$
                                   1071 ;main.c:236: printf("%s\n", get_up_message());
    000005E0 CDrD3r02         [24] 1072 	call	_get_up_message
    000005E3 C5               [16] 1073 	push	bc
    000005E4 11rB6r06         [12] 1074 	ld	de, #___str_40
    000005E7 D5               [16] 1075 	push	de
    000005E8 CDr00r00         [24] 1076 	call	_printf
    000005EB E8 04            [16] 1077 	add	sp, #4
    000005ED                       1078 00168$:
                                   1079 ;main.c:239: if (mButtons & J_DOWN)
    000005ED E5               [16] 1080 	push	hl
    000005EE F8 03            [12] 1081 	ldhl	sp,	#3
    000005F0 CB 5E            [12] 1082 	bit	3, (hl)
    000005F2 E1               [12] 1083 	pop	hl
    000005F3 28 0D            [12] 1084 	jr	Z, 00170$
                                   1085 ;main.c:241: printf("%s\n", get_down_message());
    000005F5 CDr05r03         [24] 1086 	call	_get_down_message
    000005F8 C5               [16] 1087 	push	bc
    000005F9 11rB6r06         [12] 1088 	ld	de, #___str_40
    000005FC D5               [16] 1089 	push	de
    000005FD CDr00r00         [24] 1090 	call	_printf
    00000600 E8 04            [16] 1091 	add	sp, #4
    00000602                       1092 00170$:
                                   1093 ;main.c:244: if (mButtons & J_LEFT)
    00000602 E5               [16] 1094 	push	hl
    00000603 F8 03            [12] 1095 	ldhl	sp,	#3
    00000605 CB 4E            [12] 1096 	bit	1, (hl)
    00000607 E1               [12] 1097 	pop	hl
    00000608 28 0D            [12] 1098 	jr	Z, 00172$
                                   1099 ;main.c:246: printf("%s\n", get_left_message());
    0000060A CDr37r03         [24] 1100 	call	_get_left_message
    0000060D C5               [16] 1101 	push	bc
    0000060E 11rB6r06         [12] 1102 	ld	de, #___str_40
    00000611 D5               [16] 1103 	push	de
    00000612 CDr00r00         [24] 1104 	call	_printf
    00000615 E8 04            [16] 1105 	add	sp, #4
    00000617                       1106 00172$:
                                   1107 ;main.c:249: if (mButtons & J_RIGHT)
    00000617 E5               [16] 1108 	push	hl
    00000618 F8 03            [12] 1109 	ldhl	sp,	#3
    0000061A CB 46            [12] 1110 	bit	0, (hl)
    0000061C E1               [12] 1111 	pop	hl
    0000061D 28 11            [12] 1112 	jr	Z, 00174$
                                   1113 ;main.c:251: printf("%s\n", get_right_message());
    0000061F CDr63r03         [24] 1114 	call	_get_right_message
    00000622 E1               [12] 1115 	pop	hl
    00000623 59               [ 4] 1116 	ld	e, c
    00000624 50               [ 4] 1117 	ld	d, b
    00000625 D5               [16] 1118 	push	de
    00000626 D5               [16] 1119 	push	de
    00000627 11rB6r06         [12] 1120 	ld	de, #___str_40
    0000062A D5               [16] 1121 	push	de
    0000062B CDr00r00         [24] 1122 	call	_printf
    0000062E E8 04            [16] 1123 	add	sp, #4
    00000630                       1124 00174$:
                                   1125 ;main.c:255: time_counter++;
    00000630 21r00r00         [12] 1126 	ld	hl, #_main_time_counter_20003_369
    00000633 34               [12] 1127 	inc	(hl)
                                   1128 ;main.c:256: if (time_counter > 200)
    00000634 3E C8            [ 8] 1129 	ld	a, #0xc8
    00000636 96               [ 8] 1130 	sub	a, (hl)
    00000637 30 2E            [12] 1131 	jr	NC, 00187$
                                   1132 ;main.c:258: time_counter = 0;
    00000639 36 00            [12] 1133 	ld	(hl), #0x00
                                   1134 ;main.c:260: if (hunger < 100)
    0000063B F8 03            [12] 1135 	ldhl	sp,	#3
    0000063D 7E               [ 8] 1136 	ld	a, (hl)
    0000063E D6 64            [ 8] 1137 	sub	a, #0x64
    00000640 30 01            [12] 1138 	jr	NC, 00176$
                                   1139 ;main.c:261: hunger++;
    00000642 34               [12] 1140 	inc	(hl)
    00000643                       1141 00176$:
                                   1142 ;main.c:262: if (energy > 0 && happiness > 30)
    00000643 F8 04            [12] 1143 	ldhl	sp,	#4
    00000645 7E               [ 8] 1144 	ld	a, (hl)
    00000646 B7               [ 4] 1145 	or	a, a
    00000647 28 0A            [12] 1146 	jr	Z, 00178$
    00000649 2B               [ 8] 1147 	dec	hl
    0000064A 2B               [ 8] 1148 	dec	hl
    0000064B 3E 1E            [ 8] 1149 	ld	a, #0x1e
    0000064D 96               [ 8] 1150 	sub	a, (hl)
    0000064E 30 03            [12] 1151 	jr	NC, 00178$
                                   1152 ;main.c:263: energy--;
    00000650 23               [ 8] 1153 	inc	hl
    00000651 23               [ 8] 1154 	inc	hl
    00000652 35               [12] 1155 	dec	(hl)
    00000653                       1156 00178$:
                                   1157 ;main.c:265: if (hunger > 90 || energy < 10)
    00000653 3E 5A            [ 8] 1158 	ld	a, #0x5a
    00000655 F8 03            [12] 1159 	ldhl	sp,	#3
    00000657 96               [ 8] 1160 	sub	a, (hl)
    00000658 38 06            [12] 1161 	jr	C, 00182$
    0000065A 23               [ 8] 1162 	inc	hl
    0000065B 7E               [ 8] 1163 	ld	a, (hl)
    0000065C D6 0A            [ 8] 1164 	sub	a, #0x0a
    0000065E 30 07            [12] 1165 	jr	NC, 00187$
    00000660                       1166 00182$:
                                   1167 ;main.c:267: if (happiness > 0)
    00000660 F8 02            [12] 1168 	ldhl	sp,	#2
    00000662 7E               [ 8] 1169 	ld	a, (hl)
    00000663 B7               [ 4] 1170 	or	a, a
    00000664 28 01            [12] 1171 	jr	Z, 00187$
                                   1172 ;main.c:268: happiness--;
    00000666 35               [12] 1173 	dec	(hl)
                                   1174 ;main.c:272: while (mButtons = joypad())
    00000667                       1175 00187$:
    00000667 CDr00r00         [24] 1176 	call	_joypad
    0000066A B7               [ 4] 1177 	or	a, a
    0000066B 20 FA            [12] 1178 	jr	NZ, 00187$
                                   1179 ;main.c:274: wait_vbl_done();
    0000066D CDr00r00         [24] 1180 	call	_wait_vbl_done
    00000670 C3r15r04         [16] 1181 	jp	00191$
                                   1182 ;main.c:276: }
    00000673 E8 05            [16] 1183 	add	sp, #5
    00000675 C9               [16] 1184 	ret
    00000676                       1185 ___str_34:
    00000676 59 6F 75 72 20 25 73  1186 	.ascii "Your %s is ready!"
             20 69 73 20 72 65 61
             64 79 21
    00000687 0A                    1187 	.db 0x0a
    00000688 00                    1188 	.db 0x00
    00000689                       1189 ___str_36:
    00000689 0A                    1190 	.db 0x0a
    0000068A 0A                    1191 	.db 0x0a
    0000068B 0A                    1192 	.db 0x0a
    0000068C 0A                    1193 	.db 0x0a
    0000068D 0A                    1194 	.db 0x0a
    0000068E 00                    1195 	.db 0x00
    0000068F                       1196 ___str_37:
    0000068F 48 61 70 70 69 6E 65  1197 	.ascii "Happiness: %d"
             73 73 3A 20 25 64
    0000069C 0A                    1198 	.db 0x0a
    0000069D 00                    1199 	.db 0x00
    0000069E                       1200 ___str_38:
    0000069E 48 75 6E 67 65 72 3A  1201 	.ascii "Hunger: %d"
             20 25 64
    000006A8 0A                    1202 	.db 0x0a
    000006A9 00                    1203 	.db 0x00
    000006AA                       1204 ___str_39:
    000006AA 45 6E 65 72 67 79 3A  1205 	.ascii "Energy: %d"
             20 25 64
    000006B4 0A                    1206 	.db 0x0a
    000006B5 00                    1207 	.db 0x00
    000006B6                       1208 ___str_40:
    000006B6 25 73                 1209 	.ascii "%s"
    000006B8 0A                    1210 	.db 0x0a
    000006B9 00                    1211 	.db 0x00
    000006BA                       1212 ___str_41:
    000006BA 48 75 6E 67 65 72 3A  1213 	.ascii "Hunger: %d Happiness: %d"
             20 25 64 20 48 61 70
             70 69 6E 65 73 73 3A
             20 25 64
    000006D2 0A                    1214 	.db 0x0a
    000006D3 00                    1215 	.db 0x00
    000006D4                       1216 ___str_43:
    000006D4 4E 6F 74 20 68 75 6E  1217 	.ascii "Not hungry right now!"
             67 72 79 20 72 69 67
             68 74 20 6E 6F 77 21
    000006E9 00                    1218 	.db 0x00
    000006EA                       1219 ___str_44:
    000006EA 45 6E 65 72 67 79 3A  1220 	.ascii "Energy: %d Happiness: %d"
             20 25 64 20 48 61 70
             70 69 6E 65 73 73 3A
             20 25 64
    00000702 0A                    1221 	.db 0x0a
    00000703 00                    1222 	.db 0x00
    00000704                       1223 ___str_46:
    00000704 54 6F 6F 20 74 69 72  1224 	.ascii "Too tired to play..."
             65 64 20 74 6F 20 70
             6C 61 79 2E 2E 2E
    00000718 00                    1225 	.db 0x00
    00000719                       1226 ___str_48:
    00000719 2A 7A 7A 7A 2A 20 47  1227 	.ascii "*zzz* Good rest!"
             6F 6F 64 20 72 65 73
             74 21
    00000729 00                    1228 	.db 0x00
    0000072A                       1229 ___str_49:
    0000072A 0A                    1230 	.db 0x0a
    0000072B 3D 3D 3D 20 25 73 20  1231 	.ascii "=== %s STATUS ==="
             53 54 41 54 55 53 20
             3D 3D 3D
    0000073C 0A                    1232 	.db 0x0a
    0000073D 00                    1233 	.db 0x00
    0000073E                       1234 ___str_50:
    0000073E 48 61 70 70 69 6E 65  1235 	.ascii "Happiness: %d/100"
             73 73 3A 20 25 64 2F
             31 30 30
    0000074F 0A                    1236 	.db 0x0a
    00000750 00                    1237 	.db 0x00
    00000751                       1238 ___str_51:
    00000751 48 75 6E 67 65 72 3A  1239 	.ascii "Hunger: %d/100"
             20 25 64 2F 31 30 30
    0000075F 0A                    1240 	.db 0x0a
    00000760 00                    1241 	.db 0x00
    00000761                       1242 ___str_52:
    00000761 45 6E 65 72 67 79 3A  1243 	.ascii "Energy: %d/100"
             20 25 64 2F 31 30 30
    0000076F 0A                    1244 	.db 0x0a
    00000770 00                    1245 	.db 0x00
    00000771                       1246 ___str_54:
    00000771 4D 6F 6F 64 3A 20 56  1247 	.ascii "Mood: Very Happy! :D"
             65 72 79 20 48 61 70
             70 79 21 20 3A 44
    00000785 00                    1248 	.db 0x00
    00000786                       1249 ___str_56:
    00000786 4D 6F 6F 64 3A 20 48  1250 	.ascii "Mood: Happy :)"
             61 70 70 79 20 3A 29
    00000794 00                    1251 	.db 0x00
    00000795                       1252 ___str_58:
    00000795 4D 6F 6F 64 3A 20 4F  1253 	.ascii "Mood: Okay :/"
             6B 61 79 20 3A 2F
    000007A2 00                    1254 	.db 0x00
    000007A3                       1255 ___str_60:
    000007A3 4D 6F 6F 64 3A 20 53  1256 	.ascii "Mood: Sad :("
             61 64 20 3A 28
    000007AF 00                    1257 	.db 0x00
    000007B0                       1258 ___str_62:
    000007B0 4D 6F 6F 64 3A 20 56  1259 	.ascii "Mood: Very Sad T_T"
             65 72 79 20 53 61 64
             20 54 5F 54
    000007C2 00                    1260 	.db 0x00
    000007C3                       1261 ___str_64:
    000007C3 53 74 61 74 75 73 3A  1262 	.ascii "Status: Very Hungry!"
             20 56 65 72 79 20 48
             75 6E 67 72 79 21
    000007D7 00                    1263 	.db 0x00
    000007D8                       1264 ___str_66:
    000007D8 53 74 61 74 75 73 3A  1265 	.ascii "Status: Hungry"
             20 48 75 6E 67 72 79
    000007E6 00                    1266 	.db 0x00
    000007E7                       1267 ___str_68:
    000007E7 53 74 61 74 75 73 3A  1268 	.ascii "Status: A bit hungry"
             20 41 20 62 69 74 20
             68 75 6E 67 72 79
    000007FB 00                    1269 	.db 0x00
    000007FC                       1270 ___str_70:
    000007FC 53 74 61 74 75 73 3A  1271 	.ascii "Status: Well fed"
             20 57 65 6C 6C 20 66
             65 64
    0000080C 00                    1272 	.db 0x00
    0000080D                       1273 ___str_72:
    0000080D 45 6E 65 72 67 79 3A  1274 	.ascii "Energy: Exhausted"
             20 45 78 68 61 75 73
             74 65 64
    0000081E 00                    1275 	.db 0x00
    0000081F                       1276 ___str_74:
    0000081F 45 6E 65 72 67 79 3A  1277 	.ascii "Energy: Tired"
             20 54 69 72 65 64
    0000082C 00                    1278 	.db 0x00
    0000082D                       1279 ___str_76:
    0000082D 45 6E 65 72 67 79 3A  1280 	.ascii "Energy: Normal"
             20 4E 6F 72 6D 61 6C
    0000083B 00                    1281 	.db 0x00
    0000083C                       1282 ___str_78:
    0000083C 45 6E 65 72 67 79 3A  1283 	.ascii "Energy: Full of energy!"
             20 46 75 6C 6C 20 6F
             66 20 65 6E 65 72 67
             79 21
    00000853 00                    1284 	.db 0x00
    00000854                       1285 ___str_79:
    00000854 0A                    1286 	.db 0x0a
    00000855 3D 3D 3D 20 54 41 4D  1287 	.ascii "=== TAMAGOTCHI ==="
             41 47 4F 54 43 48 49
             20 3D 3D 3D
    00000867 00                    1288 	.db 0x00
                                   1289 	.area _CODE
                                   1290 	.area _INITIALIZER
    00000000                       1291 __xinit__PoodleSprite:
    00000000 00                    1292 	.db #0x00	; 0
    00000001 00                    1293 	.db #0x00	; 0
    00000002 07                    1294 	.db #0x07	; 7
    00000003 07                    1295 	.db #0x07	; 7
    00000004 18                    1296 	.db #0x18	; 24
    00000005 1F                    1297 	.db #0x1f	; 31
    00000006 3C                    1298 	.db #0x3c	; 60
    00000007 23                    1299 	.db #0x23	; 35
    00000008 7B                    1300 	.db #0x7b	; 123
    00000009 54                    1301 	.db #0x54	; 84	'T'
    0000000A F7                    1302 	.db #0xf7	; 247
    0000000B 9C                    1303 	.db #0x9c	; 156
    0000000C F7                    1304 	.db #0xf7	; 247
    0000000D 98                    1305 	.db #0x98	; 152
    0000000E 6F                    1306 	.db #0x6f	; 111	'o'
    0000000F 70                    1307 	.db #0x70	; 112	'p'
    00000010 00                    1308 	.db #0x00	; 0
    00000011 00                    1309 	.db #0x00	; 0
    00000012 E0                    1310 	.db #0xe0	; 224
    00000013 E0                    1311 	.db #0xe0	; 224
    00000014 18                    1312 	.db #0x18	; 24
    00000015 F8                    1313 	.db #0xf8	; 248
    00000016 3C                    1314 	.db #0x3c	; 60
    00000017 C4                    1315 	.db #0xc4	; 196
    00000018 DE                    1316 	.db #0xde	; 222
    00000019 2A                    1317 	.db #0x2a	; 42
    0000001A EF                    1318 	.db #0xef	; 239
    0000001B 39                    1319 	.db #0x39	; 57	'9'
    0000001C EF                    1320 	.db #0xef	; 239
    0000001D 19                    1321 	.db #0x19	; 25
    0000001E F6                    1322 	.db #0xf6	; 246
    0000001F 0E                    1323 	.db #0x0e	; 14
    00000020 2F                    1324 	.db #0x2f	; 47
    00000021 35                    1325 	.db #0x35	; 53	'5'
    00000022 17                    1326 	.db #0x17	; 23
    00000023 1A                    1327 	.db #0x1a	; 26
    00000024 2B                    1328 	.db #0x2b	; 43
    00000025 34                    1329 	.db #0x34	; 52	'4'
    00000026 2C                    1330 	.db #0x2c	; 44
    00000027 33                    1331 	.db #0x33	; 51	'3'
    00000028 5F                    1332 	.db #0x5f	; 95
    00000029 60                    1333 	.db #0x60	; 96
    0000002A 5F                    1334 	.db #0x5f	; 95
    0000002B 60                    1335 	.db #0x60	; 96
    0000002C 5F                    1336 	.db #0x5f	; 95
    0000002D 61                    1337 	.db #0x61	; 97	'a'
    0000002E 2F                    1338 	.db #0x2f	; 47
    0000002F 31                    1339 	.db #0x31	; 49	'1'
    00000030 F4                    1340 	.db #0xf4	; 244
    00000031 AC                    1341 	.db #0xac	; 172
    00000032 E8                    1342 	.db #0xe8	; 232
    00000033 58                    1343 	.db #0x58	; 88	'X'
    00000034 D4                    1344 	.db #0xd4	; 212
    00000035 2C                    1345 	.db #0x2c	; 44
    00000036 34                    1346 	.db #0x34	; 52	'4'
    00000037 CC                    1347 	.db #0xcc	; 204
    00000038 F2                    1348 	.db #0xf2	; 242
    00000039 0E                    1349 	.db #0x0e	; 14
    0000003A FA                    1350 	.db #0xfa	; 250
    0000003B 06                    1351 	.db #0x06	; 6
    0000003C FA                    1352 	.db #0xfa	; 250
    0000003D 86                    1353 	.db #0x86	; 134
    0000003E F5                    1354 	.db #0xf5	; 245
    0000003F 8F                    1355 	.db #0x8f	; 143
    00000040 F9                    1356 	.db #0xf9	; 249
    00000041 8F                    1357 	.db #0x8f	; 143
    00000042 72                    1358 	.db #0x72	; 114	'r'
    00000043 7E                    1359 	.db #0x7e	; 126
    00000044 0C                    1360 	.db #0x0c	; 12
    00000045 0C                    1361 	.db #0x0c	; 12
    00000046 00                    1362 	.db #0x00	; 0
    00000047 00                    1363 	.db #0x00	; 0
    00000048 00                    1364 	.db #0x00	; 0
    00000049 00                    1365 	.db #0x00	; 0
    0000004A 00                    1366 	.db #0x00	; 0
    0000004B 00                    1367 	.db #0x00	; 0
    0000004C 00                    1368 	.db #0x00	; 0
    0000004D 00                    1369 	.db #0x00	; 0
    0000004E 00                    1370 	.db #0x00	; 0
    0000004F 00                    1371 	.db #0x00	; 0
    00000050 11                    1372 	.db #0x11	; 17
    00000051 1F                    1373 	.db #0x1f	; 31
    00000052 0E                    1374 	.db #0x0e	; 14
    00000053 0E                    1375 	.db #0x0e	; 14
    00000054 00                    1376 	.db #0x00	; 0
    00000055 00                    1377 	.db #0x00	; 0
    00000056 00                    1378 	.db #0x00	; 0
    00000057 00                    1379 	.db #0x00	; 0
    00000058 00                    1380 	.db #0x00	; 0
    00000059 00                    1381 	.db #0x00	; 0
    0000005A 00                    1382 	.db #0x00	; 0
    0000005B 00                    1383 	.db #0x00	; 0
    0000005C 00                    1384 	.db #0x00	; 0
    0000005D 00                    1385 	.db #0x00	; 0
    0000005E 00                    1386 	.db #0x00	; 0
    0000005F 00                    1387 	.db #0x00	; 0
    00000060                       1388 __xinit__CatSprite:
    00000060 30                    1389 	.db #0x30	; 48	'0'
    00000061 30                    1390 	.db #0x30	; 48	'0'
    00000062 4B                    1391 	.db #0x4b	; 75	'K'
    00000063 7B                    1392 	.db #0x7b	; 123
    00000064 54                    1393 	.db #0x54	; 84	'T'
    00000065 6F                    1394 	.db #0x6f	; 111	'o'
    00000066 50                    1395 	.db #0x50	; 80	'P'
    00000067 6F                    1396 	.db #0x6f	; 111	'o'
    00000068 40                    1397 	.db #0x40	; 64
    00000069 7F                    1398 	.db #0x7f	; 127
    0000006A 40                    1399 	.db #0x40	; 64
    0000006B 7F                    1400 	.db #0x7f	; 127
    0000006C 20                    1401 	.db #0x20	; 32
    0000006D 3F                    1402 	.db #0x3f	; 63
    0000006E 46                    1403 	.db #0x46	; 70	'F'
    0000006F 7F                    1404 	.db #0x7f	; 127
    00000070 01                    1405 	.db #0x01	; 1
    00000071 01                    1406 	.db #0x01	; 1
    00000072 FA                    1407 	.db #0xfa	; 250
    00000073 FB                    1408 	.db #0xfb	; 251
    00000074 05                    1409 	.db #0x05	; 5
    00000075 FE                    1410 	.db #0xfe	; 254
    00000076 41                    1411 	.db #0x41	; 65	'A'
    00000077 BE                    1412 	.db #0xbe	; 190
    00000078 40                    1413 	.db #0x40	; 64
    00000079 BF                    1414 	.db #0xbf	; 191
    0000007A 40                    1415 	.db #0x40	; 64
    0000007B BF                    1416 	.db #0xbf	; 191
    0000007C E0                    1417 	.db #0xe0	; 224
    0000007D 1F                    1418 	.db #0x1f	; 31
    0000007E EC                    1419 	.db #0xec	; 236
    0000007F 1F                    1420 	.db #0x1f	; 31
    00000080 80                    1421 	.db #0x80	; 128
    00000081 80                    1422 	.db #0x80	; 128
    00000082 40                    1423 	.db #0x40	; 64
    00000083 C0                    1424 	.db #0xc0	; 192
    00000084 40                    1425 	.db #0x40	; 64
    00000085 C0                    1426 	.db #0xc0	; 192
    00000086 40                    1427 	.db #0x40	; 64
    00000087 C0                    1428 	.db #0xc0	; 192
    00000088 40                    1429 	.db #0x40	; 64
    00000089 C0                    1430 	.db #0xc0	; 192
    0000008A 80                    1431 	.db #0x80	; 128
    0000008B 80                    1432 	.db #0x80	; 128
    0000008C 40                    1433 	.db #0x40	; 64
    0000008D C0                    1434 	.db #0xc0	; 192
    0000008E 40                    1435 	.db #0x40	; 64
    0000008F C0                    1436 	.db #0xc0	; 192
    00000090 E6                    1437 	.db #0xe6	; 230
    00000091 FF                    1438 	.db #0xff	; 255
    00000092 59                    1439 	.db #0x59	; 89	'Y'
    00000093 66                    1440 	.db #0x66	; 102	'f'
    00000094 E3                    1441 	.db #0xe3	; 227
    00000095 FC                    1442 	.db #0xfc	; 252
    00000096 43                    1443 	.db #0x43	; 67	'C'
    00000097 7C                    1444 	.db #0x7c	; 124
    00000098 21                    1445 	.db #0x21	; 33
    00000099 3E                    1446 	.db #0x3e	; 62
    0000009A 4F                    1447 	.db #0x4f	; 79	'O'
    0000009B 7E                    1448 	.db #0x7e	; 126
    0000009C 5F                    1449 	.db #0x5f	; 95
    0000009D 71                    1450 	.db #0x71	; 113	'q'
    0000009E 5F                    1451 	.db #0x5f	; 95
    0000009F 71                    1452 	.db #0x71	; 113	'q'
    000000A0 EC                    1453 	.db #0xec	; 236
    000000A1 1F                    1454 	.db #0x1f	; 31
    000000A2 F3                    1455 	.db #0xf3	; 243
    000000A3 EC                    1456 	.db #0xec	; 236
    000000A4 F8                    1457 	.db #0xf8	; 248
    000000A5 47                    1458 	.db #0x47	; 71	'G'
    000000A6 F8                    1459 	.db #0xf8	; 248
    000000A7 07                    1460 	.db #0x07	; 7
    000000A8 F0                    1461 	.db #0xf0	; 240
    000000A9 0F                    1462 	.db #0x0f	; 15
    000000AA FE                    1463 	.db #0xfe	; 254
    000000AB 0F                    1464 	.db #0x0f	; 15
    000000AC FF                    1465 	.db #0xff	; 255
    000000AD 11                    1466 	.db #0x11	; 17
    000000AE FF                    1467 	.db #0xff	; 255
    000000AF 11                    1468 	.db #0x11	; 17
    000000B0 E0                    1469 	.db #0xe0	; 224
    000000B1 E0                    1470 	.db #0xe0	; 224
    000000B2 40                    1471 	.db #0x40	; 64
    000000B3 C0                    1472 	.db #0xc0	; 192
    000000B4 E0                    1473 	.db #0xe0	; 224
    000000B5 E0                    1474 	.db #0xe0	; 224
    000000B6 40                    1475 	.db #0x40	; 64
    000000B7 C0                    1476 	.db #0xc0	; 192
    000000B8 80                    1477 	.db #0x80	; 128
    000000B9 80                    1478 	.db #0x80	; 128
    000000BA 40                    1479 	.db #0x40	; 64
    000000BB C0                    1480 	.db #0xc0	; 192
    000000BC 40                    1481 	.db #0x40	; 64
    000000BD C0                    1482 	.db #0xc0	; 192
    000000BE 40                    1483 	.db #0x40	; 64
    000000BF C0                    1484 	.db #0xc0	; 192
    000000C0 8F                    1485 	.db #0x8f	; 143
    000000C1 FE                    1486 	.db #0xfe	; 254
    000000C2 87                    1487 	.db #0x87	; 135
    000000C3 F8                    1488 	.db #0xf8	; 248
    000000C4 87                    1489 	.db #0x87	; 135
    000000C5 F8                    1490 	.db #0xf8	; 248
    000000C6 83                    1491 	.db #0x83	; 131
    000000C7 FC                    1492 	.db #0xfc	; 252
    000000C8 8F                    1493 	.db #0x8f	; 143
    000000C9 FE                    1494 	.db #0xfe	; 254
    000000CA 5F                    1495 	.db #0x5f	; 95
    000000CB 71                    1496 	.db #0x71	; 113	'q'
    000000CC 3F                    1497 	.db #0x3f	; 63
    000000CD 31                    1498 	.db #0x31	; 49	'1'
    000000CE 0E                    1499 	.db #0x0e	; 14
    000000CF 0E                    1500 	.db #0x0e	; 14
    000000D0 FE                    1501 	.db #0xfe	; 254
    000000D1 0F                    1502 	.db #0x0f	; 15
    000000D2 FC                    1503 	.db #0xfc	; 252
    000000D3 03                    1504 	.db #0x03	; 3
    000000D4 FC                    1505 	.db #0xfc	; 252
    000000D5 03                    1506 	.db #0x03	; 3
    000000D6 F8                    1507 	.db #0xf8	; 248
    000000D7 07                    1508 	.db #0x07	; 7
    000000D8 FE                    1509 	.db #0xfe	; 254
    000000D9 0F                    1510 	.db #0x0f	; 15
    000000DA FF                    1511 	.db #0xff	; 255
    000000DB 11                    1512 	.db #0x11	; 17
    000000DC FF                    1513 	.db #0xff	; 255
    000000DD F1                    1514 	.db #0xf1	; 241
    000000DE 0E                    1515 	.db #0x0e	; 14
    000000DF 0E                    1516 	.db #0x0e	; 14
    000000E0 26                    1517 	.db #0x26	; 38
    000000E1 E6                    1518 	.db #0xe6	; 230
    000000E2 2F                    1519 	.db #0x2f	; 47
    000000E3 E9                    1520 	.db #0xe9	; 233
    000000E4 2E                    1521 	.db #0x2e	; 46
    000000E5 EA                    1522 	.db #0xea	; 234
    000000E6 34                    1523 	.db #0x34	; 52	'4'
    000000E7 FC                    1524 	.db #0xfc	; 252
    000000E8 24                    1525 	.db #0x24	; 36
    000000E9 FC                    1526 	.db #0xfc	; 252
    000000EA 78                    1527 	.db #0x78	; 120	'x'
    000000EB C8                    1528 	.db #0xc8	; 200
    000000EC B0                    1529 	.db #0xb0	; 176
    000000ED B0                    1530 	.db #0xb0	; 176
    000000EE 00                    1531 	.db #0x00	; 0
    000000EF 00                    1532 	.db #0x00	; 0
    000000F0                       1533 __xinit__selected_pet:
    000000F0 00                    1534 	.db #0x00	; 0
                                   1535 	.area _CABS (ABS)
