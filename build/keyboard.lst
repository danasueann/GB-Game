                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.1 #15267 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module keyboard
                                      6 	
                                      7 ;--------------------------------------------------------
                                      8 ; Public variables in this module
                                      9 ;--------------------------------------------------------
                                     10 	.globl _set_sprite_data
                                     11 	.globl _set_bkg_tiles
                                     12 	.globl _set_bkg_data
                                     13 	.globl _wait_vbl_done
                                     14 	.globl _waitpad
                                     15 	.globl _joypad
                                     16 	.globl _name_character_index
                                     17 	.globl _pet_has_name
                                     18 	.globl _keydown
                                     19 	.globl _cursor
                                     20 	.globl _pet_name
                                     21 	.globl _maxcursor_y
                                     22 	.globl _mincursor_y
                                     23 	.globl _maxcursor_x
                                     24 	.globl _mincursor_x
                                     25 	.globl _choose_name
                                     26 	.globl _keyboard_input_loop
                                     27 	.globl _handle_keyboard_input
                                     28 	.globl _move_cursor_up
                                     29 	.globl _move_cursor_down
                                     30 	.globl _move_cursor_left
                                     31 	.globl _move_cursor_right
                                     32 	.globl _is_within_keyboard
                                     33 	.globl _add_character_to_name
                                     34 	.globl _update_pet_name
                                     35 	.globl _draw_pet_name
                                     36 	.globl _remove_from_pet_name
                                     37 	.globl _performantdelay
                                     38 ;--------------------------------------------------------
                                     39 ; special function registers
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area _DATA
    00000000                         45 _pet_name::
    00000000                         46 	.ds 18
    00000012                         47 _cursor::
    00000012                         48 	.ds 4
                                     49 ;--------------------------------------------------------
                                     50 ; ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area _INITIALIZED
    00000000                         53 _keydown::
    00000000                         54 	.ds 1
    00000001                         55 _pet_has_name::
    00000001                         56 	.ds 1
    00000002                         57 _name_character_index::
    00000002                         58 	.ds 1
                                     59 ;--------------------------------------------------------
                                     60 ; absolute external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area _DABS (ABS)
                                     63 ;--------------------------------------------------------
                                     64 ; global & static initialisations
                                     65 ;--------------------------------------------------------
                                     66 	.area _HOME
                                     67 	.area _GSINIT
                                     68 	.area _GSFINAL
                                     69 	.area _GSINIT
                                     70 ;--------------------------------------------------------
                                     71 ; Home
                                     72 ;--------------------------------------------------------
                                     73 	.area _HOME
                                     74 	.area _HOME
                                     75 ;--------------------------------------------------------
                                     76 ; code
                                     77 ;--------------------------------------------------------
                                     78 	.area _CODE
                                     79 ;keyboard.c:19: void choose_name(void)
                                     80 ;	---------------------------------
                                     81 ; Function choose_name
                                     82 ; ---------------------------------
    00000000                         83 _choose_name::
                                     84 ;keyboard.c:21: cursor.x = KEYBOARD_START_X;
    00000000 21r12r00         [12]   85 	ld	hl, #_cursor
    00000003 36 0C            [12]   86 	ld	(hl), #0x0c
                                     87 ;keyboard.c:22: cursor.y = KEYBOARD_START_Y;
    00000005 01r13r00         [12]   88 	ld	bc, #_cursor + 1
                                     89 ;keyboard.c:23: cursor.col = 0;
    00000008 23               [ 8]   90 	inc	hl
    00000009 23               [ 8]   91 	inc	hl
    0000000A 3E 50            [ 8]   92 	ld	a, #0x50
    0000000C 02               [ 8]   93 	ld	(bc), a
    0000000D 36 00            [12]   94 	ld	(hl), #0x00
                                     95 ;keyboard.c:24: cursor.row = 0;
    0000000F 21r15r00         [12]   96 	ld	hl, #_cursor + 3
    00000012 36 00            [12]   97 	ld	(hl), #0x00
                                     98 ;keyboard.c:26: set_sprite_data(0, 1, cursor_sprite);
    00000014 11r00r00         [12]   99 	ld	de, #_cursor_sprite
    00000017 D5               [16]  100 	push	de
    00000018 AF               [ 4]  101 	xor	a, a
    00000019 3C               [ 4]  102 	inc	a
    0000001A F5               [16]  103 	push	af
    0000001B CDr00r00         [24]  104 	call	_set_sprite_data
    0000001E E8 04            [16]  105 	add	sp, #4
                                    106 ;c:\gbdk\include\gb\gb.h:1887: shadow_OAM[nb].tile=tile;
    00000020 21r02r00         [12]  107 	ld	hl, #(_shadow_OAM + 2)
    00000023 36 00            [12]  108 	ld	(hl), #0x00
                                    109 ;keyboard.c:29: move_sprite(0, cursor.x, cursor.y);
    00000025 0A               [ 8]  110 	ld	a, (bc)
    00000026 4F               [ 4]  111 	ld	c, a
    00000027 21r12r00         [12]  112 	ld	hl, #_cursor
    0000002A 46               [ 8]  113 	ld	b, (hl)
                                    114 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000002B 21r00r00         [12]  115 	ld	hl, #_shadow_OAM
                                    116 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    0000002E 79               [ 4]  117 	ld	a, c
    0000002F 22               [ 8]  118 	ld	(hl+), a
    00000030 70               [ 8]  119 	ld	(hl), b
                                    120 ;keyboard.c:30: set_bkg_data(0, 45, keyboarddata);
    00000031 11r00r00         [12]  121 	ld	de, #_keyboarddata
    00000034 D5               [16]  122 	push	de
    00000035 21 00 2D         [12]  123 	ld	hl, #0x2d00
    00000038 E5               [16]  124 	push	hl
    00000039 CDr00r00         [24]  125 	call	_set_bkg_data
    0000003C E8 04            [16]  126 	add	sp, #4
                                    127 ;keyboard.c:31: set_bkg_tiles(0, 0, 20, 18, keyboardmap);
    0000003E 11r00r00         [12]  128 	ld	de, #_keyboardmap
    00000041 D5               [16]  129 	push	de
    00000042 21 14 12         [12]  130 	ld	hl, #0x1214
    00000045 E5               [16]  131 	push	hl
    00000046 AF               [ 4]  132 	xor	a, a
    00000047 0F               [ 4]  133 	rrca
    00000048 F5               [16]  134 	push	af
    00000049 CDr00r00         [24]  135 	call	_set_bkg_tiles
    0000004C E8 06            [16]  136 	add	sp, #6
                                    137 ;c:\gbdk\include\gb\gb.h:1475: SCX_REG+=x, SCY_REG+=y;
    0000004E F0r00            [12]  138 	ldh	a, (_SCX_REG + 0)
    00000050 C6 FC            [ 8]  139 	add	a, #0xfc
    00000052 E0r00            [12]  140 	ldh	(_SCX_REG + 0), a
                                    141 ;keyboard.c:34: SHOW_BKG;
    00000054 F0r00            [12]  142 	ldh	a, (_LCDC_REG + 0)
    00000056 F6 01            [ 8]  143 	or	a, #0x01
    00000058 E0r00            [12]  144 	ldh	(_LCDC_REG + 0), a
                                    145 ;keyboard.c:35: SHOW_SPRITES;
    0000005A F0r00            [12]  146 	ldh	a, (_LCDC_REG + 0)
    0000005C F6 02            [ 8]  147 	or	a, #0x02
    0000005E E0r00            [12]  148 	ldh	(_LCDC_REG + 0), a
                                    149 ;keyboard.c:36: }
    00000060 C9               [16]  150 	ret
    00000061                        151 _mincursor_x:
    00000061 0C                     152 	.db #0x0c	; 12
    00000062                        153 _maxcursor_x:
    00000062 9C                     154 	.db #0x9c	; 156
    00000063                        155 _mincursor_y:
    00000063 50                     156 	.db #0x50	; 80	'P'
    00000064                        157 _maxcursor_y:
    00000064 80                     158 	.db #0x80	; 128
                                    159 ;keyboard.c:38: void keyboard_input_loop(void)
                                    160 ;	---------------------------------
                                    161 ; Function keyboard_input_loop
                                    162 ; ---------------------------------
    00000065                        163 _keyboard_input_loop::
                                    164 ;keyboard.c:41: while (pet_has_name == 0)
    00000065                        165 00105$:
    00000065 FAr01r00         [16]  166 	ld	a, (#_pet_has_name)
    00000068 B7               [ 4]  167 	or	a, a
    00000069 C0               [20]  168 	ret	NZ
                                    169 ;keyboard.c:43: if (keydown)
    0000006A FAr00r00         [16]  170 	ld	a, (#_keydown)
    0000006D B7               [ 4]  171 	or	a, a
    0000006E 28 09            [12]  172 	jr	Z, 00102$
                                    173 ;keyboard.c:45: waitpad(J_UP | J_DOWN | J_LEFT | J_RIGHT | J_A | J_B);
    00000070 3E 3F            [ 8]  174 	ld	a, #0x3f
    00000072 CDr00r00         [24]  175 	call	_waitpad
                                    176 ;keyboard.c:46: keydown = 0;
    00000075 AF               [ 4]  177 	xor	a, a
    00000076 EAr00r00         [16]  178 	ld	(#_keydown),a
    00000079                        179 00102$:
                                    180 ;keyboard.c:49: UBYTE joy = joypad();
    00000079 CDr00r00         [24]  181 	call	_joypad
                                    182 ;keyboard.c:50: if (joy)
                                    183 ;keyboard.c:52: handle_keyboard_input(joy);
    0000007C B7               [ 4]  184 	or	a,a
    0000007D 28 03            [12]  185 	jr	Z, 00104$
    0000007F CDr89r00         [24]  186 	call	_handle_keyboard_input
    00000082                        187 00104$:
                                    188 ;keyboard.c:55: performantdelay(10);
    00000082 3E 0A            [ 8]  189 	ld	a, #0x0a
    00000084 CDr24r02         [24]  190 	call	_performantdelay
                                    191 ;keyboard.c:57: }
    00000087 18 DC            [12]  192 	jr	00105$
                                    193 ;keyboard.c:59: void handle_keyboard_input(UBYTE joy)
                                    194 ;	---------------------------------
                                    195 ; Function handle_keyboard_input
                                    196 ; ---------------------------------
    00000089                        197 _handle_keyboard_input::
                                    198 ;keyboard.c:61: switch (joy)
    00000089 FE 01            [ 8]  199 	cp	a, #0x01
    0000008B CAr42r01         [16]  200 	jp	Z, _move_cursor_right
    0000008E FE 02            [ 8]  201 	cp	a, #0x02
    00000090 CAr16r01         [16]  202 	jp	Z, _move_cursor_left
    00000093 FE 04            [ 8]  203 	cp	a, #0x04
    00000095 CArBCr00         [16]  204 	jp	Z, _move_cursor_up
    00000098 FE 08            [ 8]  205 	cp	a, #0x08
    0000009A CArE9r00         [16]  206 	jp	Z, _move_cursor_down
    0000009D FE 10            [ 8]  207 	cp	a, #0x10
    0000009F 28 09            [12]  208 	jr	Z, 00105$
    000000A1 D6 20            [ 8]  209 	sub	a, #0x20
    000000A3 28 11            [12]  210 	jr	Z, 00106$
                                    211 ;keyboard.c:63: case J_UP:
                                    212 ;keyboard.c:64: move_cursor_up();
    000000A5 C9               [16]  213 	ret
                                    214 ;keyboard.c:65: break;
                                    215 ;keyboard.c:66: case J_DOWN:
                                    216 ;keyboard.c:67: move_cursor_down();
    000000A6 C9               [16]  217 	ret
                                    218 ;keyboard.c:68: break;
                                    219 ;keyboard.c:69: case J_LEFT:
                                    220 ;keyboard.c:70: move_cursor_left();
    000000A7 C9               [16]  221 	ret
                                    222 ;keyboard.c:71: break;
                                    223 ;keyboard.c:72: case J_RIGHT:
                                    224 ;keyboard.c:73: move_cursor_right();
    000000A8 C9               [16]  225 	ret
                                    226 ;keyboard.c:74: break;
    000000A9 C9               [16]  227 	ret
                                    228 ;keyboard.c:75: case J_A:
    000000AA                        229 00105$:
                                    230 ;keyboard.c:76: update_pet_name(&cursor);
    000000AA 11r12r00         [12]  231 	ld	de, #_cursor
    000000AD CDrCDr01         [24]  232 	call	_update_pet_name
                                    233 ;keyboard.c:77: keydown = 1;
    000000B0 21r00r00         [12]  234 	ld	hl, #_keydown
    000000B3 36 01            [12]  235 	ld	(hl), #0x01
                                    236 ;keyboard.c:78: break;
    000000B5 C9               [16]  237 	ret
                                    238 ;keyboard.c:79: case J_B:
    000000B6                        239 00106$:
                                    240 ;keyboard.c:80: draw_pet_name();
    000000B6 CDrFFr01         [24]  241 	call	_draw_pet_name
                                    242 ;keyboard.c:81: remove_from_pet_name();
                                    243 ;keyboard.c:83: }
                                    244 ;keyboard.c:84: }
    000000B9 C3r11r02         [16]  245 	jp	_remove_from_pet_name
                                    246 ;keyboard.c:86: void move_cursor_up(void)
                                    247 ;	---------------------------------
                                    248 ; Function move_cursor_up
                                    249 ; ---------------------------------
    000000BC                        250 _move_cursor_up::
                                    251 ;keyboard.c:88: if (is_within_keyboard(cursor.x, cursor.y - 16))
    000000BC 21r13r00         [12]  252 	ld	hl, #_cursor + 1
    000000BF 7E               [ 8]  253 	ld	a, (hl)
    000000C0 C6 F0            [ 8]  254 	add	a, #0xf0
    000000C2 5F               [ 4]  255 	ld	e, a
    000000C3 01r12r00         [12]  256 	ld	bc, #_cursor
    000000C6 0A               [ 8]  257 	ld	a, (bc)
    000000C7 E5               [16]  258 	push	hl
    000000C8 C5               [16]  259 	push	bc
    000000C9 CDr6Er01         [24]  260 	call	_is_within_keyboard
    000000CC C1               [12]  261 	pop	bc
    000000CD E1               [12]  262 	pop	hl
    000000CE B7               [ 4]  263 	or	a, a
    000000CF C8               [20]  264 	ret	Z
                                    265 ;keyboard.c:90: cursor.row--;
    000000D0 11r15r00         [12]  266 	ld	de, #_cursor + 3
    000000D3 1A               [ 8]  267 	ld	a, (de)
    000000D4 3D               [ 4]  268 	dec	a
    000000D5 12               [ 8]  269 	ld	(de), a
                                    270 ;keyboard.c:91: cursor.y -= 16;
    000000D6 7E               [ 8]  271 	ld	a, (hl)
    000000D7 C6 F0            [ 8]  272 	add	a, #0xf0
    000000D9 77               [ 8]  273 	ld	(hl), a
                                    274 ;keyboard.c:92: move_sprite(0, cursor.x, cursor.y);
    000000DA 5E               [ 8]  275 	ld	e, (hl)
    000000DB 0A               [ 8]  276 	ld	a, (bc)
    000000DC 4F               [ 4]  277 	ld	c, a
                                    278 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    000000DD 21r00r00         [12]  279 	ld	hl, #_shadow_OAM
                                    280 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    000000E0 73               [ 8]  281 	ld	(hl), e
    000000E1 23               [ 8]  282 	inc	hl
    000000E2 71               [ 8]  283 	ld	(hl), c
                                    284 ;keyboard.c:93: keydown = 1;
    000000E3 21r00r00         [12]  285 	ld	hl, #_keydown
    000000E6 36 01            [12]  286 	ld	(hl), #0x01
                                    287 ;keyboard.c:95: }
    000000E8 C9               [16]  288 	ret
                                    289 ;keyboard.c:97: void move_cursor_down(void)
                                    290 ;	---------------------------------
                                    291 ; Function move_cursor_down
                                    292 ; ---------------------------------
    000000E9                        293 _move_cursor_down::
                                    294 ;keyboard.c:99: if (is_within_keyboard(cursor.x, cursor.y + 16))
    000000E9 21r13r00         [12]  295 	ld	hl, #_cursor + 1
    000000EC 7E               [ 8]  296 	ld	a, (hl)
    000000ED C6 10            [ 8]  297 	add	a, #0x10
    000000EF 5F               [ 4]  298 	ld	e, a
    000000F0 01r12r00         [12]  299 	ld	bc, #_cursor
    000000F3 0A               [ 8]  300 	ld	a, (bc)
    000000F4 E5               [16]  301 	push	hl
    000000F5 C5               [16]  302 	push	bc
    000000F6 CDr6Er01         [24]  303 	call	_is_within_keyboard
    000000F9 C1               [12]  304 	pop	bc
    000000FA E1               [12]  305 	pop	hl
    000000FB B7               [ 4]  306 	or	a, a
    000000FC C8               [20]  307 	ret	Z
                                    308 ;keyboard.c:101: cursor.row++;
    000000FD 11r15r00         [12]  309 	ld	de, #_cursor + 3
    00000100 1A               [ 8]  310 	ld	a, (de)
    00000101 3C               [ 4]  311 	inc	a
    00000102 12               [ 8]  312 	ld	(de), a
                                    313 ;keyboard.c:102: cursor.y += 16;
    00000103 7E               [ 8]  314 	ld	a, (hl)
    00000104 C6 10            [ 8]  315 	add	a, #0x10
    00000106 77               [ 8]  316 	ld	(hl), a
                                    317 ;keyboard.c:103: move_sprite(0, cursor.x, cursor.y);
    00000107 5E               [ 8]  318 	ld	e, (hl)
    00000108 0A               [ 8]  319 	ld	a, (bc)
    00000109 4F               [ 4]  320 	ld	c, a
                                    321 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000010A 21r00r00         [12]  322 	ld	hl, #_shadow_OAM
                                    323 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    0000010D 73               [ 8]  324 	ld	(hl), e
    0000010E 23               [ 8]  325 	inc	hl
    0000010F 71               [ 8]  326 	ld	(hl), c
                                    327 ;keyboard.c:104: keydown = 1;
    00000110 21r00r00         [12]  328 	ld	hl, #_keydown
    00000113 36 01            [12]  329 	ld	(hl), #0x01
                                    330 ;keyboard.c:106: }
    00000115 C9               [16]  331 	ret
                                    332 ;keyboard.c:108: void move_cursor_left(void)
                                    333 ;	---------------------------------
                                    334 ; Function move_cursor_left
                                    335 ; ---------------------------------
    00000116                        336 _move_cursor_left::
                                    337 ;keyboard.c:110: if (is_within_keyboard(cursor.x - 16, cursor.y))
    00000116 21r13r00         [12]  338 	ld	hl, #_cursor + 1
    00000119 5E               [ 8]  339 	ld	e, (hl)
    0000011A 01r12r00         [12]  340 	ld	bc, #_cursor
    0000011D 0A               [ 8]  341 	ld	a, (bc)
    0000011E C6 F0            [ 8]  342 	add	a, #0xf0
    00000120 E5               [16]  343 	push	hl
    00000121 C5               [16]  344 	push	bc
    00000122 CDr6Er01         [24]  345 	call	_is_within_keyboard
    00000125 C1               [12]  346 	pop	bc
    00000126 E1               [12]  347 	pop	hl
    00000127 B7               [ 4]  348 	or	a, a
    00000128 C8               [20]  349 	ret	Z
                                    350 ;keyboard.c:112: cursor.col--;
    00000129 11r14r00         [12]  351 	ld	de, #_cursor + 2
    0000012C 1A               [ 8]  352 	ld	a, (de)
    0000012D 3D               [ 4]  353 	dec	a
    0000012E 12               [ 8]  354 	ld	(de), a
                                    355 ;keyboard.c:113: cursor.x -= 16;
    0000012F 0A               [ 8]  356 	ld	a, (bc)
    00000130 C6 F0            [ 8]  357 	add	a, #0xf0
    00000132 02               [ 8]  358 	ld	(bc), a
                                    359 ;keyboard.c:114: move_sprite(0, cursor.x, cursor.y);
    00000133 5E               [ 8]  360 	ld	e, (hl)
    00000134 0A               [ 8]  361 	ld	a, (bc)
    00000135 4F               [ 4]  362 	ld	c, a
                                    363 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    00000136 21r00r00         [12]  364 	ld	hl, #_shadow_OAM
                                    365 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    00000139 73               [ 8]  366 	ld	(hl), e
    0000013A 23               [ 8]  367 	inc	hl
    0000013B 71               [ 8]  368 	ld	(hl), c
                                    369 ;keyboard.c:115: keydown = 1;
    0000013C 21r00r00         [12]  370 	ld	hl, #_keydown
    0000013F 36 01            [12]  371 	ld	(hl), #0x01
                                    372 ;keyboard.c:117: }
    00000141 C9               [16]  373 	ret
                                    374 ;keyboard.c:119: void move_cursor_right(void)
                                    375 ;	---------------------------------
                                    376 ; Function move_cursor_right
                                    377 ; ---------------------------------
    00000142                        378 _move_cursor_right::
                                    379 ;keyboard.c:121: if (is_within_keyboard(cursor.x + 16, cursor.y))
    00000142 21r13r00         [12]  380 	ld	hl, #_cursor + 1
    00000145 5E               [ 8]  381 	ld	e, (hl)
    00000146 01r12r00         [12]  382 	ld	bc, #_cursor
    00000149 0A               [ 8]  383 	ld	a, (bc)
    0000014A C6 10            [ 8]  384 	add	a, #0x10
    0000014C E5               [16]  385 	push	hl
    0000014D C5               [16]  386 	push	bc
    0000014E CDr6Er01         [24]  387 	call	_is_within_keyboard
    00000151 C1               [12]  388 	pop	bc
    00000152 E1               [12]  389 	pop	hl
    00000153 B7               [ 4]  390 	or	a, a
    00000154 C8               [20]  391 	ret	Z
                                    392 ;keyboard.c:123: cursor.col++;
    00000155 11r14r00         [12]  393 	ld	de, #_cursor + 2
    00000158 1A               [ 8]  394 	ld	a, (de)
    00000159 3C               [ 4]  395 	inc	a
    0000015A 12               [ 8]  396 	ld	(de), a
                                    397 ;keyboard.c:124: cursor.x += 16;
    0000015B 0A               [ 8]  398 	ld	a, (bc)
    0000015C C6 10            [ 8]  399 	add	a, #0x10
    0000015E 02               [ 8]  400 	ld	(bc), a
                                    401 ;keyboard.c:125: move_sprite(0, cursor.x, cursor.y);
    0000015F 5E               [ 8]  402 	ld	e, (hl)
    00000160 0A               [ 8]  403 	ld	a, (bc)
    00000161 4F               [ 4]  404 	ld	c, a
                                    405 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    00000162 21r00r00         [12]  406 	ld	hl, #_shadow_OAM
                                    407 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    00000165 73               [ 8]  408 	ld	(hl), e
    00000166 23               [ 8]  409 	inc	hl
    00000167 71               [ 8]  410 	ld	(hl), c
                                    411 ;keyboard.c:126: keydown = 1;
    00000168 21r00r00         [12]  412 	ld	hl, #_keydown
    0000016B 36 01            [12]  413 	ld	(hl), #0x01
                                    414 ;keyboard.c:128: }
    0000016D C9               [16]  415 	ret
                                    416 ;keyboard.c:130: UBYTE is_within_keyboard(UINT8 x, UINT8 y)
                                    417 ;	---------------------------------
                                    418 ; Function is_within_keyboard
                                    419 ; ---------------------------------
    0000016E                        420 _is_within_keyboard::
    0000016E 4F               [ 4]  421 	ld	c, a
                                    422 ;keyboard.c:133: if ((x == 140 && y == 144) || (x == 156 && y == 144))
    0000016F 7B               [ 4]  423 	ld	a, e
    00000170 D6 90            [ 8]  424 	sub	a, #0x90
    00000172 3E 01            [ 8]  425 	ld	a, #0x01
    00000174 28 01            [12]  426 	jr	Z, 00151$
    00000176 AF               [ 4]  427 	xor	a, a
    00000177                        428 00151$:
    00000177 47               [ 4]  429 	ld	b, a
    00000178 79               [ 4]  430 	ld	a, c
    00000179 D6 8C            [ 8]  431 	sub	a, #0x8c
    0000017B 20 03            [12]  432 	jr	NZ, 00105$
    0000017D B0               [ 4]  433 	or	a, b
    0000017E 20 08            [12]  434 	jr	NZ, 00101$
    00000180                        435 00105$:
    00000180 79               [ 4]  436 	ld	a, c
    00000181 D6 9C            [ 8]  437 	sub	a, #0x9c
    00000183 20 06            [12]  438 	jr	NZ, 00102$
    00000185 B0               [ 4]  439 	or	a, b
    00000186 28 03            [12]  440 	jr	Z, 00102$
    00000188                        441 00101$:
                                    442 ;keyboard.c:135: return 1;
    00000188 3E 01            [ 8]  443 	ld	a, #0x01
    0000018A C9               [16]  444 	ret
    0000018B                        445 00102$:
                                    446 ;keyboard.c:137: return (x >= mincursor_x && x <= maxcursor_x && y >= mincursor_y && y <= maxcursor_y);
    0000018B 79               [ 4]  447 	ld	a, c
    0000018C D6 0C            [ 8]  448 	sub	a, #0x0c
    0000018E 38 0F            [12]  449 	jr	C, 00108$
    00000190 3E 9C            [ 8]  450 	ld	a, #0x9c
    00000192 91               [ 4]  451 	sub	a, c
    00000193 38 0A            [12]  452 	jr	C, 00108$
    00000195 7B               [ 4]  453 	ld	a, e
    00000196 D6 50            [ 8]  454 	sub	a, #0x50
    00000198 38 05            [12]  455 	jr	C, 00108$
    0000019A 3E 80            [ 8]  456 	ld	a, #0x80
    0000019C 93               [ 4]  457 	sub	a, e
    0000019D 30 02            [12]  458 	jr	NC, 00109$
    0000019F                        459 00108$:
    0000019F AF               [ 4]  460 	xor	a, a
    000001A0 C9               [16]  461 	ret
    000001A1                        462 00109$:
    000001A1 3E 01            [ 8]  463 	ld	a, #0x01
                                    464 ;keyboard.c:138: }
    000001A3 C9               [16]  465 	ret
                                    466 ;keyboard.c:140: void add_character_to_name(struct Cursor *cursor)
                                    467 ;	---------------------------------
                                    468 ; Function add_character_to_name
                                    469 ; ---------------------------------
    000001A4                        470 _add_character_to_name::
    000001A4 4B               [ 4]  471 	ld	c, e
    000001A5 42               [ 4]  472 	ld	b, d
                                    473 ;keyboard.c:142: UINT8 character_index = cursor->row * 10 + cursor->col + 1;
    000001A6 69               [ 4]  474 	ld	l, c
    000001A7 60               [ 4]  475 	ld	h, b
    000001A8 23               [ 8]  476 	inc	hl
    000001A9 23               [ 8]  477 	inc	hl
    000001AA 23               [ 8]  478 	inc	hl
    000001AB 6E               [ 8]  479 	ld	l, (hl)
    000001AC 5D               [ 4]  480 	ld	e, l
    000001AD 29               [ 8]  481 	add	hl, hl
    000001AE 29               [ 8]  482 	add	hl, hl
    000001AF 19               [ 8]  483 	add	hl, de
    000001B0 29               [ 8]  484 	add	hl, hl
    000001B1 03               [ 8]  485 	inc	bc
    000001B2 03               [ 8]  486 	inc	bc
    000001B3 0A               [ 8]  487 	ld	a, (bc)
    000001B4 85               [ 4]  488 	add	a, l
    000001B5 4F               [ 4]  489 	ld	c, a
    000001B6 0C               [ 4]  490 	inc	c
                                    491 ;keyboard.c:144: if (name_character_index == 18)
    000001B7 FAr02r00         [16]  492 	ld	a, (#_name_character_index)
    000001BA D6 12            [ 8]  493 	sub	a, #0x12
    000001BC C8               [20]  494 	ret	Z
                                    495 ;keyboard.c:145: return; // Maximum length reached
                                    496 ;keyboard.c:147: pet_name[name_character_index] = character_index;
    000001BD 3Er00            [ 8]  497 	ld	a, #<(_pet_name)
    000001BF 21r02r00         [12]  498 	ld	hl, #_name_character_index
    000001C2 86               [ 8]  499 	add	a, (hl)
    000001C3 5F               [ 4]  500 	ld	e, a
    000001C4 3Es00            [ 8]  501 	ld	a, #>(_pet_name)
    000001C6 CE 00            [ 8]  502 	adc	a, #0x00
    000001C8 57               [ 4]  503 	ld	d, a
    000001C9 79               [ 4]  504 	ld	a, c
    000001CA 12               [ 8]  505 	ld	(de), a
                                    506 ;keyboard.c:148: name_character_index++;
    000001CB 34               [12]  507 	inc	(hl)
                                    508 ;keyboard.c:149: }
    000001CC C9               [16]  509 	ret
                                    510 ;keyboard.c:151: void update_pet_name(struct Cursor *cursor)
                                    511 ;	---------------------------------
                                    512 ; Function update_pet_name
                                    513 ; ---------------------------------
    000001CD                        514 _update_pet_name::
                                    515 ;keyboard.c:153: if (cursor->col == 8 && cursor->row == 4)
    000001CD 6B               [ 4]  516 	ld	l, e
    000001CE 62               [ 4]  517 	ld	h, d
    000001CF 23               [ 8]  518 	inc	hl
    000001D0 23               [ 8]  519 	inc	hl
    000001D1 4E               [ 8]  520 	ld	c, (hl)
    000001D2 6B               [ 4]  521 	ld	l, e
    000001D3 62               [ 4]  522 	ld	h, d
    000001D4 23               [ 8]  523 	inc	hl
    000001D5 23               [ 8]  524 	inc	hl
    000001D6 23               [ 8]  525 	inc	hl
    000001D7 79               [ 4]  526 	ld	a, c
    000001D8 D6 08            [ 8]  527 	sub	a, #0x08
    000001DA 20 0B            [12]  528 	jr	NZ, 00106$
    000001DC 7E               [ 8]  529 	ld	a, (hl)
    000001DD D6 04            [ 8]  530 	sub	a, #0x04
    000001DF 20 06            [12]  531 	jr	NZ, 00106$
                                    532 ;keyboard.c:155: remove_from_pet_name();
    000001E1 CDr11r02         [24]  533 	call	_remove_from_pet_name
                                    534 ;keyboard.c:156: draw_pet_name();
    000001E4 C3rFFr01         [16]  535 	jp	_draw_pet_name
    000001E7                        536 00106$:
                                    537 ;keyboard.c:158: else if (cursor->col == 9 && cursor->row == 4)
    000001E7 79               [ 4]  538 	ld	a, c
    000001E8 D6 09            [ 8]  539 	sub	a, #0x09
    000001EA 20 0D            [12]  540 	jr	NZ, 00102$
    000001EC 7E               [ 8]  541 	ld	a, (hl)
    000001ED D6 04            [ 8]  542 	sub	a, #0x04
    000001EF 20 08            [12]  543 	jr	NZ, 00102$
                                    544 ;keyboard.c:160: pet_has_name = 1; // Indicate that the player has chosen a name
    000001F1 21r01r00         [12]  545 	ld	hl, #_pet_has_name
                                    546 ;keyboard.c:161: draw_pet_name();
    000001F4 36 01            [12]  547 	ld	(hl), #0x01
    000001F6 C3rFFr01         [16]  548 	jp	_draw_pet_name
    000001F9                        549 00102$:
                                    550 ;keyboard.c:165: add_character_to_name(cursor);
    000001F9 CDrA4r01         [24]  551 	call	_add_character_to_name
                                    552 ;keyboard.c:166: draw_pet_name();
                                    553 ;keyboard.c:168: }
    000001FC C3rFFr01         [16]  554 	jp	_draw_pet_name
                                    555 ;keyboard.c:170: void draw_pet_name(void)
                                    556 ;	---------------------------------
                                    557 ; Function draw_pet_name
                                    558 ; ---------------------------------
    000001FF                        559 _draw_pet_name::
                                    560 ;keyboard.c:172: set_bkg_tiles(1, 4, 18, 1, pet_name);
    000001FF 11r00r00         [12]  561 	ld	de, #_pet_name
    00000202 D5               [16]  562 	push	de
    00000203 21 12 01         [12]  563 	ld	hl, #0x112
    00000206 E5               [16]  564 	push	hl
    00000207 21 01 04         [12]  565 	ld	hl, #0x401
    0000020A E5               [16]  566 	push	hl
    0000020B CDr00r00         [24]  567 	call	_set_bkg_tiles
    0000020E E8 06            [16]  568 	add	sp, #6
                                    569 ;keyboard.c:173: }
    00000210 C9               [16]  570 	ret
                                    571 ;keyboard.c:175: void remove_from_pet_name(void)
                                    572 ;	---------------------------------
                                    573 ; Function remove_from_pet_name
                                    574 ; ---------------------------------
    00000211                        575 _remove_from_pet_name::
                                    576 ;keyboard.c:177: if (name_character_index > 0)
    00000211 21r02r00         [12]  577 	ld	hl, #_name_character_index
    00000214 7E               [ 8]  578 	ld	a, (hl)
    00000215 B7               [ 4]  579 	or	a, a
    00000216 C8               [20]  580 	ret	Z
                                    581 ;keyboard.c:179: name_character_index--;
    00000217 35               [12]  582 	dec	(hl)
                                    583 ;keyboard.c:180: pet_name[name_character_index] = 0; // Clear the last character
    00000218 3Er00            [ 8]  584 	ld	a, #<(_pet_name)
    0000021A 86               [ 8]  585 	add	a, (hl)
    0000021B 4F               [ 4]  586 	ld	c, a
    0000021C 3Es00            [ 8]  587 	ld	a, #>(_pet_name)
    0000021E CE 00            [ 8]  588 	adc	a, #0x00
    00000220 47               [ 4]  589 	ld	b, a
    00000221 AF               [ 4]  590 	xor	a, a
    00000222 02               [ 8]  591 	ld	(bc), a
                                    592 ;keyboard.c:182: }
    00000223 C9               [16]  593 	ret
                                    594 ;keyboard.c:185: void performantdelay(UINT8 numloops)
                                    595 ;	---------------------------------
                                    596 ; Function performantdelay
                                    597 ; ---------------------------------
    00000224                        598 _performantdelay::
    00000224 4F               [ 4]  599 	ld	c, a
                                    600 ;keyboard.c:188: for (i = 0; i < numloops; i++)
    00000225 06 00            [ 8]  601 	ld	b, #0x00
    00000227                        602 00103$:
    00000227 78               [ 4]  603 	ld	a, b
    00000228 91               [ 4]  604 	sub	a, c
    00000229 D0               [20]  605 	ret	NC
                                    606 ;keyboard.c:190: wait_vbl_done();
    0000022A CDr00r00         [24]  607 	call	_wait_vbl_done
                                    608 ;keyboard.c:188: for (i = 0; i < numloops; i++)
    0000022D 04               [ 4]  609 	inc	b
                                    610 ;keyboard.c:192: }
    0000022E 18 F7            [12]  611 	jr	00103$
                                    612 	.area _CODE
                                    613 	.area _INITIALIZER
    00000000                        614 __xinit__keydown:
    00000000 00                     615 	.db #0x00	; 0
    00000001                        616 __xinit__pet_has_name:
    00000001 00                     617 	.db #0x00	; 0
    00000002                        618 __xinit__name_character_index:
    00000002 00                     619 	.db #0x00	; 0
                                    620 	.area _CABS (ABS)
