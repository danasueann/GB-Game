                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.1 #15267 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module keyboard
                                      6 	
                                      7 ;--------------------------------------------------------
                                      8 ; Public variables in this module
                                      9 ;--------------------------------------------------------
                                     10 	.globl _set_sprite_data
                                     11 	.globl _set_bkg_tiles
                                     12 	.globl _set_bkg_data
                                     13 	.globl _wait_vbl_done
                                     14 	.globl _waitpad
                                     15 	.globl _joypad
                                     16 	.globl _name_character_index
                                     17 	.globl _pet_has_name
                                     18 	.globl _keydown
                                     19 	.globl _cursor
                                     20 	.globl _pet_name
                                     21 	.globl _maxcursor_y
                                     22 	.globl _mincursor_y
                                     23 	.globl _maxcursor_x
                                     24 	.globl _mincursor_x
                                     25 	.globl _choose_name
                                     26 	.globl _keyboard_input_loop
                                     27 	.globl _handle_keyboard_input
                                     28 	.globl _move_cursor_up
                                     29 	.globl _move_cursor_down
                                     30 	.globl _move_cursor_left
                                     31 	.globl _move_cursor_right
                                     32 	.globl _is_within_keyboard
                                     33 	.globl _add_character_to_name
                                     34 	.globl _update_pet_name
                                     35 	.globl _draw_pet_name
                                     36 	.globl _remove_from_pet_name
                                     37 	.globl _performantdelay
                                     38 ;--------------------------------------------------------
                                     39 ; special function registers
                                     40 ;--------------------------------------------------------
                                     41 ;--------------------------------------------------------
                                     42 ; ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area _DATA
    00000000                         45 _pet_name::
    00000000                         46 	.ds 6
    00000006                         47 _cursor::
    00000006                         48 	.ds 4
                                     49 ;--------------------------------------------------------
                                     50 ; ram data
                                     51 ;--------------------------------------------------------
                                     52 	.area _INITIALIZED
    00000000                         53 _keydown::
    00000000                         54 	.ds 1
    00000001                         55 _pet_has_name::
    00000001                         56 	.ds 1
    00000002                         57 _name_character_index::
    00000002                         58 	.ds 1
                                     59 ;--------------------------------------------------------
                                     60 ; absolute external ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area _DABS (ABS)
                                     63 ;--------------------------------------------------------
                                     64 ; global & static initialisations
                                     65 ;--------------------------------------------------------
                                     66 	.area _HOME
                                     67 	.area _GSINIT
                                     68 	.area _GSFINAL
                                     69 	.area _GSINIT
                                     70 ;--------------------------------------------------------
                                     71 ; Home
                                     72 ;--------------------------------------------------------
                                     73 	.area _HOME
                                     74 	.area _HOME
                                     75 ;--------------------------------------------------------
                                     76 ; code
                                     77 ;--------------------------------------------------------
                                     78 	.area _CODE
                                     79 ;keyboard.c:19: void choose_name(void)
                                     80 ;	---------------------------------
                                     81 ; Function choose_name
                                     82 ; ---------------------------------
    00000000                         83 _choose_name::
                                     84 ;keyboard.c:21: cursor.x = KEYBOARD_START_X;
    00000000 21r06r00         [12]   85 	ld	hl, #_cursor
    00000003 36 0C            [12]   86 	ld	(hl), #0x0c
                                     87 ;keyboard.c:22: cursor.y = KEYBOARD_START_Y;
    00000005 01r07r00         [12]   88 	ld	bc, #_cursor + 1
                                     89 ;keyboard.c:23: cursor.col = 0;
    00000008 23               [ 8]   90 	inc	hl
    00000009 23               [ 8]   91 	inc	hl
    0000000A 3E 50            [ 8]   92 	ld	a, #0x50
    0000000C 02               [ 8]   93 	ld	(bc), a
    0000000D 36 00            [12]   94 	ld	(hl), #0x00
                                     95 ;keyboard.c:24: cursor.row = 0;
    0000000F 21r09r00         [12]   96 	ld	hl, #_cursor + 3
    00000012 36 00            [12]   97 	ld	(hl), #0x00
                                     98 ;keyboard.c:26: set_sprite_data(0, 1, cursor_sprite);
    00000014 11r00r00         [12]   99 	ld	de, #_cursor_sprite
    00000017 D5               [16]  100 	push	de
    00000018 AF               [ 4]  101 	xor	a, a
    00000019 3C               [ 4]  102 	inc	a
    0000001A F5               [16]  103 	push	af
    0000001B CDr00r00         [24]  104 	call	_set_sprite_data
    0000001E E8 04            [16]  105 	add	sp, #4
                                    106 ;c:\gbdk\include\gb\gb.h:1887: shadow_OAM[nb].tile=tile;
    00000020 21r02r00         [12]  107 	ld	hl, #(_shadow_OAM + 2)
    00000023 36 00            [12]  108 	ld	(hl), #0x00
                                    109 ;keyboard.c:29: move_sprite(0, cursor.x, cursor.y);
    00000025 0A               [ 8]  110 	ld	a, (bc)
    00000026 4F               [ 4]  111 	ld	c, a
    00000027 21r06r00         [12]  112 	ld	hl, #_cursor
    0000002A 46               [ 8]  113 	ld	b, (hl)
                                    114 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000002B 21r00r00         [12]  115 	ld	hl, #_shadow_OAM
                                    116 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    0000002E 79               [ 4]  117 	ld	a, c
    0000002F 22               [ 8]  118 	ld	(hl+), a
    00000030 70               [ 8]  119 	ld	(hl), b
                                    120 ;keyboard.c:30: set_bkg_data(0, 45, keyboarddata);
    00000031 11r00r00         [12]  121 	ld	de, #_keyboarddata
    00000034 D5               [16]  122 	push	de
    00000035 21 00 2D         [12]  123 	ld	hl, #0x2d00
    00000038 E5               [16]  124 	push	hl
    00000039 CDr00r00         [24]  125 	call	_set_bkg_data
    0000003C E8 04            [16]  126 	add	sp, #4
                                    127 ;keyboard.c:31: set_bkg_tiles(0, 0, 20, 18, keyboardmap);
    0000003E 11r00r00         [12]  128 	ld	de, #_keyboardmap
    00000041 D5               [16]  129 	push	de
    00000042 21 14 12         [12]  130 	ld	hl, #0x1214
    00000045 E5               [16]  131 	push	hl
    00000046 AF               [ 4]  132 	xor	a, a
    00000047 0F               [ 4]  133 	rrca
    00000048 F5               [16]  134 	push	af
    00000049 CDr00r00         [24]  135 	call	_set_bkg_tiles
    0000004C E8 06            [16]  136 	add	sp, #6
                                    137 ;c:\gbdk\include\gb\gb.h:1475: SCX_REG+=x, SCY_REG+=y;
    0000004E F0r00            [12]  138 	ldh	a, (_SCX_REG + 0)
    00000050 C6 FC            [ 8]  139 	add	a, #0xfc
    00000052 E0r00            [12]  140 	ldh	(_SCX_REG + 0), a
                                    141 ;keyboard.c:34: SHOW_BKG;
    00000054 F0r00            [12]  142 	ldh	a, (_LCDC_REG + 0)
    00000056 F6 01            [ 8]  143 	or	a, #0x01
    00000058 E0r00            [12]  144 	ldh	(_LCDC_REG + 0), a
                                    145 ;keyboard.c:35: SHOW_SPRITES;
    0000005A F0r00            [12]  146 	ldh	a, (_LCDC_REG + 0)
    0000005C F6 02            [ 8]  147 	or	a, #0x02
    0000005E E0r00            [12]  148 	ldh	(_LCDC_REG + 0), a
                                    149 ;keyboard.c:36: }
    00000060 C9               [16]  150 	ret
    00000061                        151 _mincursor_x:
    00000061 0C                     152 	.db #0x0c	; 12
    00000062                        153 _maxcursor_x:
    00000062 9C                     154 	.db #0x9c	; 156
    00000063                        155 _mincursor_y:
    00000063 50                     156 	.db #0x50	; 80	'P'
    00000064                        157 _maxcursor_y:
    00000064 80                     158 	.db #0x80	; 128
                                    159 ;keyboard.c:38: void keyboard_input_loop(void)
                                    160 ;	---------------------------------
                                    161 ; Function keyboard_input_loop
                                    162 ; ---------------------------------
    00000065                        163 _keyboard_input_loop::
                                    164 ;keyboard.c:41: while (pet_has_name == 0)
    00000065                        165 00105$:
    00000065 FAr01r00         [16]  166 	ld	a, (#_pet_has_name)
    00000068 B7               [ 4]  167 	or	a, a
    00000069 C0               [20]  168 	ret	NZ
                                    169 ;keyboard.c:43: if (keydown)
    0000006A FAr00r00         [16]  170 	ld	a, (#_keydown)
    0000006D B7               [ 4]  171 	or	a, a
    0000006E 28 09            [12]  172 	jr	Z, 00102$
                                    173 ;keyboard.c:45: waitpad(J_UP | J_DOWN | J_LEFT | J_RIGHT | J_A | J_B);
    00000070 3E 3F            [ 8]  174 	ld	a, #0x3f
    00000072 CDr00r00         [24]  175 	call	_waitpad
                                    176 ;keyboard.c:46: keydown = 0;
    00000075 AF               [ 4]  177 	xor	a, a
    00000076 EAr00r00         [16]  178 	ld	(#_keydown),a
    00000079                        179 00102$:
                                    180 ;keyboard.c:49: UBYTE joy = joypad();
    00000079 CDr00r00         [24]  181 	call	_joypad
                                    182 ;keyboard.c:50: if (joy)
                                    183 ;keyboard.c:52: handle_keyboard_input(joy);
    0000007C B7               [ 4]  184 	or	a,a
    0000007D 28 03            [12]  185 	jr	Z, 00104$
    0000007F CDr89r00         [24]  186 	call	_handle_keyboard_input
    00000082                        187 00104$:
                                    188 ;keyboard.c:55: performantdelay(10);
    00000082 3E 0A            [ 8]  189 	ld	a, #0x0a
    00000084 CDr42r02         [24]  190 	call	_performantdelay
                                    191 ;keyboard.c:57: }
    00000087 18 DC            [12]  192 	jr	00105$
                                    193 ;keyboard.c:59: void handle_keyboard_input(UBYTE joy)
                                    194 ;	---------------------------------
                                    195 ; Function handle_keyboard_input
                                    196 ; ---------------------------------
    00000089                        197 _handle_keyboard_input::
                                    198 ;keyboard.c:61: switch (joy)
    00000089 FE 01            [ 8]  199 	cp	a, #0x01
    0000008B CAr60r01         [16]  200 	jp	Z, _move_cursor_right
    0000008E FE 02            [ 8]  201 	cp	a, #0x02
    00000090 CAr34r01         [16]  202 	jp	Z, _move_cursor_left
    00000093 FE 04            [ 8]  203 	cp	a, #0x04
    00000095 CArDAr00         [16]  204 	jp	Z, _move_cursor_up
    00000098 FE 08            [ 8]  205 	cp	a, #0x08
    0000009A CAr07r01         [16]  206 	jp	Z, _move_cursor_down
    0000009D FE 10            [ 8]  207 	cp	a, #0x10
    0000009F 28 0D            [12]  208 	jr	Z, 00105$
    000000A1 FE 20            [ 8]  209 	cp	a, #0x20
    000000A3 28 15            [12]  210 	jr	Z, 00106$
    000000A5 D6 80            [ 8]  211 	sub	a, #0x80
    000000A7 28 1D            [12]  212 	jr	Z, 00107$
                                    213 ;keyboard.c:63: case J_UP:
                                    214 ;keyboard.c:64: move_cursor_up();
    000000A9 C9               [16]  215 	ret
                                    216 ;keyboard.c:65: break;
                                    217 ;keyboard.c:66: case J_DOWN:
                                    218 ;keyboard.c:67: move_cursor_down();
    000000AA C9               [16]  219 	ret
                                    220 ;keyboard.c:68: break;
                                    221 ;keyboard.c:69: case J_LEFT:
                                    222 ;keyboard.c:70: move_cursor_left();
    000000AB C9               [16]  223 	ret
                                    224 ;keyboard.c:71: break;
                                    225 ;keyboard.c:72: case J_RIGHT:
                                    226 ;keyboard.c:73: move_cursor_right();
    000000AC C9               [16]  227 	ret
                                    228 ;keyboard.c:74: break;
    000000AD C9               [16]  229 	ret
                                    230 ;keyboard.c:75: case J_A:
    000000AE                        231 00105$:
                                    232 ;keyboard.c:76: update_pet_name(&cursor);
    000000AE 11r06r00         [12]  233 	ld	de, #_cursor
    000000B1 CDrEBr01         [24]  234 	call	_update_pet_name
                                    235 ;keyboard.c:77: keydown = 1;
    000000B4 21r00r00         [12]  236 	ld	hl, #_keydown
    000000B7 36 01            [12]  237 	ld	(hl), #0x01
                                    238 ;keyboard.c:78: break;
    000000B9 C9               [16]  239 	ret
                                    240 ;keyboard.c:79: case J_B:
    000000BA                        241 00106$:
                                    242 ;keyboard.c:80: draw_pet_name();
    000000BA CDr1Dr02         [24]  243 	call	_draw_pet_name
                                    244 ;keyboard.c:81: remove_from_pet_name();
    000000BD CDr2Fr02         [24]  245 	call	_remove_from_pet_name
                                    246 ;keyboard.c:82: keydown = 1;
    000000C0 21r00r00         [12]  247 	ld	hl, #_keydown
    000000C3 36 01            [12]  248 	ld	(hl), #0x01
                                    249 ;keyboard.c:83: break;
    000000C5 C9               [16]  250 	ret
                                    251 ;keyboard.c:84: case J_START:
    000000C6                        252 00107$:
                                    253 ;keyboard.c:85: if (name_character_index > 0)
    000000C6 FAr02r00         [16]  254 	ld	a, (#_name_character_index)
    000000C9 B7               [ 4]  255 	or	a, a
    000000CA 28 08            [12]  256 	jr	Z, 00109$
                                    257 ;keyboard.c:87: pet_has_name = 1;
    000000CC 21r01r00         [12]  258 	ld	hl, #_pet_has_name
    000000CF 36 01            [12]  259 	ld	(hl), #0x01
                                    260 ;keyboard.c:88: draw_pet_name();
    000000D1 CDr1Dr02         [24]  261 	call	_draw_pet_name
    000000D4                        262 00109$:
                                    263 ;keyboard.c:90: keydown = 1;
    000000D4 21r00r00         [12]  264 	ld	hl, #_keydown
    000000D7 36 01            [12]  265 	ld	(hl), #0x01
                                    266 ;keyboard.c:92: }
                                    267 ;keyboard.c:93: }
    000000D9 C9               [16]  268 	ret
                                    269 ;keyboard.c:95: void move_cursor_up(void)
                                    270 ;	---------------------------------
                                    271 ; Function move_cursor_up
                                    272 ; ---------------------------------
    000000DA                        273 _move_cursor_up::
                                    274 ;keyboard.c:97: if (is_within_keyboard(cursor.x, cursor.y - 16))
    000000DA 21r07r00         [12]  275 	ld	hl, #_cursor + 1
    000000DD 7E               [ 8]  276 	ld	a, (hl)
    000000DE C6 F0            [ 8]  277 	add	a, #0xf0
    000000E0 5F               [ 4]  278 	ld	e, a
    000000E1 01r06r00         [12]  279 	ld	bc, #_cursor
    000000E4 0A               [ 8]  280 	ld	a, (bc)
    000000E5 E5               [16]  281 	push	hl
    000000E6 C5               [16]  282 	push	bc
    000000E7 CDr8Cr01         [24]  283 	call	_is_within_keyboard
    000000EA C1               [12]  284 	pop	bc
    000000EB E1               [12]  285 	pop	hl
    000000EC B7               [ 4]  286 	or	a, a
    000000ED C8               [20]  287 	ret	Z
                                    288 ;keyboard.c:99: cursor.row--;
    000000EE 11r09r00         [12]  289 	ld	de, #_cursor + 3
    000000F1 1A               [ 8]  290 	ld	a, (de)
    000000F2 3D               [ 4]  291 	dec	a
    000000F3 12               [ 8]  292 	ld	(de), a
                                    293 ;keyboard.c:100: cursor.y -= 16;
    000000F4 7E               [ 8]  294 	ld	a, (hl)
    000000F5 C6 F0            [ 8]  295 	add	a, #0xf0
    000000F7 77               [ 8]  296 	ld	(hl), a
                                    297 ;keyboard.c:101: move_sprite(0, cursor.x, cursor.y);
    000000F8 5E               [ 8]  298 	ld	e, (hl)
    000000F9 0A               [ 8]  299 	ld	a, (bc)
    000000FA 4F               [ 4]  300 	ld	c, a
                                    301 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    000000FB 21r00r00         [12]  302 	ld	hl, #_shadow_OAM
                                    303 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    000000FE 73               [ 8]  304 	ld	(hl), e
    000000FF 23               [ 8]  305 	inc	hl
    00000100 71               [ 8]  306 	ld	(hl), c
                                    307 ;keyboard.c:102: keydown = 1;
    00000101 21r00r00         [12]  308 	ld	hl, #_keydown
    00000104 36 01            [12]  309 	ld	(hl), #0x01
                                    310 ;keyboard.c:104: }
    00000106 C9               [16]  311 	ret
                                    312 ;keyboard.c:106: void move_cursor_down(void)
                                    313 ;	---------------------------------
                                    314 ; Function move_cursor_down
                                    315 ; ---------------------------------
    00000107                        316 _move_cursor_down::
                                    317 ;keyboard.c:108: if (is_within_keyboard(cursor.x, cursor.y + 16))
    00000107 21r07r00         [12]  318 	ld	hl, #_cursor + 1
    0000010A 7E               [ 8]  319 	ld	a, (hl)
    0000010B C6 10            [ 8]  320 	add	a, #0x10
    0000010D 5F               [ 4]  321 	ld	e, a
    0000010E 01r06r00         [12]  322 	ld	bc, #_cursor
    00000111 0A               [ 8]  323 	ld	a, (bc)
    00000112 E5               [16]  324 	push	hl
    00000113 C5               [16]  325 	push	bc
    00000114 CDr8Cr01         [24]  326 	call	_is_within_keyboard
    00000117 C1               [12]  327 	pop	bc
    00000118 E1               [12]  328 	pop	hl
    00000119 B7               [ 4]  329 	or	a, a
    0000011A C8               [20]  330 	ret	Z
                                    331 ;keyboard.c:110: cursor.row++;
    0000011B 11r09r00         [12]  332 	ld	de, #_cursor + 3
    0000011E 1A               [ 8]  333 	ld	a, (de)
    0000011F 3C               [ 4]  334 	inc	a
    00000120 12               [ 8]  335 	ld	(de), a
                                    336 ;keyboard.c:111: cursor.y += 16;
    00000121 7E               [ 8]  337 	ld	a, (hl)
    00000122 C6 10            [ 8]  338 	add	a, #0x10
    00000124 77               [ 8]  339 	ld	(hl), a
                                    340 ;keyboard.c:112: move_sprite(0, cursor.x, cursor.y);
    00000125 5E               [ 8]  341 	ld	e, (hl)
    00000126 0A               [ 8]  342 	ld	a, (bc)
    00000127 4F               [ 4]  343 	ld	c, a
                                    344 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    00000128 21r00r00         [12]  345 	ld	hl, #_shadow_OAM
                                    346 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    0000012B 73               [ 8]  347 	ld	(hl), e
    0000012C 23               [ 8]  348 	inc	hl
    0000012D 71               [ 8]  349 	ld	(hl), c
                                    350 ;keyboard.c:113: keydown = 1;
    0000012E 21r00r00         [12]  351 	ld	hl, #_keydown
    00000131 36 01            [12]  352 	ld	(hl), #0x01
                                    353 ;keyboard.c:115: }
    00000133 C9               [16]  354 	ret
                                    355 ;keyboard.c:117: void move_cursor_left(void)
                                    356 ;	---------------------------------
                                    357 ; Function move_cursor_left
                                    358 ; ---------------------------------
    00000134                        359 _move_cursor_left::
                                    360 ;keyboard.c:119: if (is_within_keyboard(cursor.x - 16, cursor.y))
    00000134 21r07r00         [12]  361 	ld	hl, #_cursor + 1
    00000137 5E               [ 8]  362 	ld	e, (hl)
    00000138 01r06r00         [12]  363 	ld	bc, #_cursor
    0000013B 0A               [ 8]  364 	ld	a, (bc)
    0000013C C6 F0            [ 8]  365 	add	a, #0xf0
    0000013E E5               [16]  366 	push	hl
    0000013F C5               [16]  367 	push	bc
    00000140 CDr8Cr01         [24]  368 	call	_is_within_keyboard
    00000143 C1               [12]  369 	pop	bc
    00000144 E1               [12]  370 	pop	hl
    00000145 B7               [ 4]  371 	or	a, a
    00000146 C8               [20]  372 	ret	Z
                                    373 ;keyboard.c:121: cursor.col--;
    00000147 11r08r00         [12]  374 	ld	de, #_cursor + 2
    0000014A 1A               [ 8]  375 	ld	a, (de)
    0000014B 3D               [ 4]  376 	dec	a
    0000014C 12               [ 8]  377 	ld	(de), a
                                    378 ;keyboard.c:122: cursor.x -= 16;
    0000014D 0A               [ 8]  379 	ld	a, (bc)
    0000014E C6 F0            [ 8]  380 	add	a, #0xf0
    00000150 02               [ 8]  381 	ld	(bc), a
                                    382 ;keyboard.c:123: move_sprite(0, cursor.x, cursor.y);
    00000151 5E               [ 8]  383 	ld	e, (hl)
    00000152 0A               [ 8]  384 	ld	a, (bc)
    00000153 4F               [ 4]  385 	ld	c, a
                                    386 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    00000154 21r00r00         [12]  387 	ld	hl, #_shadow_OAM
                                    388 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    00000157 73               [ 8]  389 	ld	(hl), e
    00000158 23               [ 8]  390 	inc	hl
    00000159 71               [ 8]  391 	ld	(hl), c
                                    392 ;keyboard.c:124: keydown = 1;
    0000015A 21r00r00         [12]  393 	ld	hl, #_keydown
    0000015D 36 01            [12]  394 	ld	(hl), #0x01
                                    395 ;keyboard.c:126: }
    0000015F C9               [16]  396 	ret
                                    397 ;keyboard.c:128: void move_cursor_right(void)
                                    398 ;	---------------------------------
                                    399 ; Function move_cursor_right
                                    400 ; ---------------------------------
    00000160                        401 _move_cursor_right::
                                    402 ;keyboard.c:130: if (is_within_keyboard(cursor.x + 16, cursor.y))
    00000160 21r07r00         [12]  403 	ld	hl, #_cursor + 1
    00000163 5E               [ 8]  404 	ld	e, (hl)
    00000164 01r06r00         [12]  405 	ld	bc, #_cursor
    00000167 0A               [ 8]  406 	ld	a, (bc)
    00000168 C6 10            [ 8]  407 	add	a, #0x10
    0000016A E5               [16]  408 	push	hl
    0000016B C5               [16]  409 	push	bc
    0000016C CDr8Cr01         [24]  410 	call	_is_within_keyboard
    0000016F C1               [12]  411 	pop	bc
    00000170 E1               [12]  412 	pop	hl
    00000171 B7               [ 4]  413 	or	a, a
    00000172 C8               [20]  414 	ret	Z
                                    415 ;keyboard.c:132: cursor.col++;
    00000173 11r08r00         [12]  416 	ld	de, #_cursor + 2
    00000176 1A               [ 8]  417 	ld	a, (de)
    00000177 3C               [ 4]  418 	inc	a
    00000178 12               [ 8]  419 	ld	(de), a
                                    420 ;keyboard.c:133: cursor.x += 16;
    00000179 0A               [ 8]  421 	ld	a, (bc)
    0000017A C6 10            [ 8]  422 	add	a, #0x10
    0000017C 02               [ 8]  423 	ld	(bc), a
                                    424 ;keyboard.c:134: move_sprite(0, cursor.x, cursor.y);
    0000017D 5E               [ 8]  425 	ld	e, (hl)
    0000017E 0A               [ 8]  426 	ld	a, (bc)
    0000017F 4F               [ 4]  427 	ld	c, a
                                    428 ;c:\gbdk\include\gb\gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    00000180 21r00r00         [12]  429 	ld	hl, #_shadow_OAM
                                    430 ;c:\gbdk\include\gb\gb.h:1974: itm->y=y, itm->x=x;
    00000183 73               [ 8]  431 	ld	(hl), e
    00000184 23               [ 8]  432 	inc	hl
    00000185 71               [ 8]  433 	ld	(hl), c
                                    434 ;keyboard.c:135: keydown = 1;
    00000186 21r00r00         [12]  435 	ld	hl, #_keydown
    00000189 36 01            [12]  436 	ld	(hl), #0x01
                                    437 ;keyboard.c:137: }
    0000018B C9               [16]  438 	ret
                                    439 ;keyboard.c:139: UBYTE is_within_keyboard(UINT8 x, UINT8 y)
                                    440 ;	---------------------------------
                                    441 ; Function is_within_keyboard
                                    442 ; ---------------------------------
    0000018C                        443 _is_within_keyboard::
    0000018C 4F               [ 4]  444 	ld	c, a
                                    445 ;keyboard.c:142: if ((x == 140 && y == 144) || (x == 156 && y == 144))
    0000018D 7B               [ 4]  446 	ld	a, e
    0000018E D6 90            [ 8]  447 	sub	a, #0x90
    00000190 3E 01            [ 8]  448 	ld	a, #0x01
    00000192 28 01            [12]  449 	jr	Z, 00151$
    00000194 AF               [ 4]  450 	xor	a, a
    00000195                        451 00151$:
    00000195 47               [ 4]  452 	ld	b, a
    00000196 79               [ 4]  453 	ld	a, c
    00000197 D6 8C            [ 8]  454 	sub	a, #0x8c
    00000199 20 03            [12]  455 	jr	NZ, 00105$
    0000019B B0               [ 4]  456 	or	a, b
    0000019C 20 08            [12]  457 	jr	NZ, 00101$
    0000019E                        458 00105$:
    0000019E 79               [ 4]  459 	ld	a, c
    0000019F D6 9C            [ 8]  460 	sub	a, #0x9c
    000001A1 20 06            [12]  461 	jr	NZ, 00102$
    000001A3 B0               [ 4]  462 	or	a, b
    000001A4 28 03            [12]  463 	jr	Z, 00102$
    000001A6                        464 00101$:
                                    465 ;keyboard.c:144: return 1;
    000001A6 3E 01            [ 8]  466 	ld	a, #0x01
    000001A8 C9               [16]  467 	ret
    000001A9                        468 00102$:
                                    469 ;keyboard.c:146: return (x >= mincursor_x && x <= maxcursor_x && y >= mincursor_y && y <= maxcursor_y);
    000001A9 79               [ 4]  470 	ld	a, c
    000001AA D6 0C            [ 8]  471 	sub	a, #0x0c
    000001AC 38 0F            [12]  472 	jr	C, 00108$
    000001AE 3E 9C            [ 8]  473 	ld	a, #0x9c
    000001B0 91               [ 4]  474 	sub	a, c
    000001B1 38 0A            [12]  475 	jr	C, 00108$
    000001B3 7B               [ 4]  476 	ld	a, e
    000001B4 D6 50            [ 8]  477 	sub	a, #0x50
    000001B6 38 05            [12]  478 	jr	C, 00108$
    000001B8 3E 80            [ 8]  479 	ld	a, #0x80
    000001BA 93               [ 4]  480 	sub	a, e
    000001BB 30 02            [12]  481 	jr	NC, 00109$
    000001BD                        482 00108$:
    000001BD AF               [ 4]  483 	xor	a, a
    000001BE C9               [16]  484 	ret
    000001BF                        485 00109$:
    000001BF 3E 01            [ 8]  486 	ld	a, #0x01
                                    487 ;keyboard.c:147: }
    000001C1 C9               [16]  488 	ret
                                    489 ;keyboard.c:149: void add_character_to_name(struct Cursor *cursor)
                                    490 ;	---------------------------------
                                    491 ; Function add_character_to_name
                                    492 ; ---------------------------------
    000001C2                        493 _add_character_to_name::
    000001C2 4B               [ 4]  494 	ld	c, e
    000001C3 42               [ 4]  495 	ld	b, d
                                    496 ;keyboard.c:151: UINT8 character_index = cursor->row * 10 + cursor->col + 1;
    000001C4 69               [ 4]  497 	ld	l, c
    000001C5 60               [ 4]  498 	ld	h, b
    000001C6 23               [ 8]  499 	inc	hl
    000001C7 23               [ 8]  500 	inc	hl
    000001C8 23               [ 8]  501 	inc	hl
    000001C9 6E               [ 8]  502 	ld	l, (hl)
    000001CA 5D               [ 4]  503 	ld	e, l
    000001CB 29               [ 8]  504 	add	hl, hl
    000001CC 29               [ 8]  505 	add	hl, hl
    000001CD 19               [ 8]  506 	add	hl, de
    000001CE 29               [ 8]  507 	add	hl, hl
    000001CF 03               [ 8]  508 	inc	bc
    000001D0 03               [ 8]  509 	inc	bc
    000001D1 0A               [ 8]  510 	ld	a, (bc)
    000001D2 85               [ 4]  511 	add	a, l
    000001D3 4F               [ 4]  512 	ld	c, a
    000001D4 0C               [ 4]  513 	inc	c
                                    514 ;keyboard.c:153: if (name_character_index == 6)
    000001D5 FAr02r00         [16]  515 	ld	a, (#_name_character_index)
    000001D8 D6 06            [ 8]  516 	sub	a, #0x06
    000001DA C8               [20]  517 	ret	Z
                                    518 ;keyboard.c:154: return; // Maximum length reached
                                    519 ;keyboard.c:156: pet_name[name_character_index] = character_index;
    000001DB 3Er00            [ 8]  520 	ld	a, #<(_pet_name)
    000001DD 21r02r00         [12]  521 	ld	hl, #_name_character_index
    000001E0 86               [ 8]  522 	add	a, (hl)
    000001E1 5F               [ 4]  523 	ld	e, a
    000001E2 3Es00            [ 8]  524 	ld	a, #>(_pet_name)
    000001E4 CE 00            [ 8]  525 	adc	a, #0x00
    000001E6 57               [ 4]  526 	ld	d, a
    000001E7 79               [ 4]  527 	ld	a, c
    000001E8 12               [ 8]  528 	ld	(de), a
                                    529 ;keyboard.c:157: name_character_index++;
    000001E9 34               [12]  530 	inc	(hl)
                                    531 ;keyboard.c:158: }
    000001EA C9               [16]  532 	ret
                                    533 ;keyboard.c:160: void update_pet_name(struct Cursor *cursor)
                                    534 ;	---------------------------------
                                    535 ; Function update_pet_name
                                    536 ; ---------------------------------
    000001EB                        537 _update_pet_name::
                                    538 ;keyboard.c:162: if (cursor->col == 8 && cursor->row == 4)
    000001EB 6B               [ 4]  539 	ld	l, e
    000001EC 62               [ 4]  540 	ld	h, d
    000001ED 23               [ 8]  541 	inc	hl
    000001EE 23               [ 8]  542 	inc	hl
    000001EF 4E               [ 8]  543 	ld	c, (hl)
    000001F0 6B               [ 4]  544 	ld	l, e
    000001F1 62               [ 4]  545 	ld	h, d
    000001F2 23               [ 8]  546 	inc	hl
    000001F3 23               [ 8]  547 	inc	hl
    000001F4 23               [ 8]  548 	inc	hl
    000001F5 79               [ 4]  549 	ld	a, c
    000001F6 D6 08            [ 8]  550 	sub	a, #0x08
    000001F8 20 0B            [12]  551 	jr	NZ, 00106$
    000001FA 7E               [ 8]  552 	ld	a, (hl)
    000001FB D6 04            [ 8]  553 	sub	a, #0x04
    000001FD 20 06            [12]  554 	jr	NZ, 00106$
                                    555 ;keyboard.c:164: remove_from_pet_name();
    000001FF CDr2Fr02         [24]  556 	call	_remove_from_pet_name
                                    557 ;keyboard.c:165: draw_pet_name();
    00000202 C3r1Dr02         [16]  558 	jp	_draw_pet_name
    00000205                        559 00106$:
                                    560 ;keyboard.c:167: else if (cursor->col == 9 && cursor->row == 4)
    00000205 79               [ 4]  561 	ld	a, c
    00000206 D6 09            [ 8]  562 	sub	a, #0x09
    00000208 20 0D            [12]  563 	jr	NZ, 00102$
    0000020A 7E               [ 8]  564 	ld	a, (hl)
    0000020B D6 04            [ 8]  565 	sub	a, #0x04
    0000020D 20 08            [12]  566 	jr	NZ, 00102$
                                    567 ;keyboard.c:169: pet_has_name = 1; // Indicate that the player has chosen a name
    0000020F 21r01r00         [12]  568 	ld	hl, #_pet_has_name
                                    569 ;keyboard.c:170: draw_pet_name();
    00000212 36 01            [12]  570 	ld	(hl), #0x01
    00000214 C3r1Dr02         [16]  571 	jp	_draw_pet_name
    00000217                        572 00102$:
                                    573 ;keyboard.c:174: add_character_to_name(cursor);
    00000217 CDrC2r01         [24]  574 	call	_add_character_to_name
                                    575 ;keyboard.c:175: draw_pet_name();
                                    576 ;keyboard.c:177: }
    0000021A C3r1Dr02         [16]  577 	jp	_draw_pet_name
                                    578 ;keyboard.c:179: void draw_pet_name(void)
                                    579 ;	---------------------------------
                                    580 ; Function draw_pet_name
                                    581 ; ---------------------------------
    0000021D                        582 _draw_pet_name::
                                    583 ;keyboard.c:181: set_bkg_tiles(1, 4, 6, 1, pet_name);
    0000021D 11r00r00         [12]  584 	ld	de, #_pet_name
    00000220 D5               [16]  585 	push	de
    00000221 21 06 01         [12]  586 	ld	hl, #0x106
    00000224 E5               [16]  587 	push	hl
    00000225 21 01 04         [12]  588 	ld	hl, #0x401
    00000228 E5               [16]  589 	push	hl
    00000229 CDr00r00         [24]  590 	call	_set_bkg_tiles
    0000022C E8 06            [16]  591 	add	sp, #6
                                    592 ;keyboard.c:182: }
    0000022E C9               [16]  593 	ret
                                    594 ;keyboard.c:184: void remove_from_pet_name(void)
                                    595 ;	---------------------------------
                                    596 ; Function remove_from_pet_name
                                    597 ; ---------------------------------
    0000022F                        598 _remove_from_pet_name::
                                    599 ;keyboard.c:186: if (name_character_index > 0)
    0000022F 21r02r00         [12]  600 	ld	hl, #_name_character_index
    00000232 7E               [ 8]  601 	ld	a, (hl)
    00000233 B7               [ 4]  602 	or	a, a
    00000234 C8               [20]  603 	ret	Z
                                    604 ;keyboard.c:188: name_character_index--;
    00000235 35               [12]  605 	dec	(hl)
                                    606 ;keyboard.c:189: pet_name[name_character_index] = 0; // Clear the last character
    00000236 3Er00            [ 8]  607 	ld	a, #<(_pet_name)
    00000238 86               [ 8]  608 	add	a, (hl)
    00000239 4F               [ 4]  609 	ld	c, a
    0000023A 3Es00            [ 8]  610 	ld	a, #>(_pet_name)
    0000023C CE 00            [ 8]  611 	adc	a, #0x00
    0000023E 47               [ 4]  612 	ld	b, a
    0000023F AF               [ 4]  613 	xor	a, a
    00000240 02               [ 8]  614 	ld	(bc), a
                                    615 ;keyboard.c:191: }
    00000241 C9               [16]  616 	ret
                                    617 ;keyboard.c:194: void performantdelay(UINT8 numloops)
                                    618 ;	---------------------------------
                                    619 ; Function performantdelay
                                    620 ; ---------------------------------
    00000242                        621 _performantdelay::
    00000242 4F               [ 4]  622 	ld	c, a
                                    623 ;keyboard.c:197: for (i = 0; i < numloops; i++)
    00000243 06 00            [ 8]  624 	ld	b, #0x00
    00000245                        625 00103$:
    00000245 78               [ 4]  626 	ld	a, b
    00000246 91               [ 4]  627 	sub	a, c
    00000247 D0               [20]  628 	ret	NC
                                    629 ;keyboard.c:199: wait_vbl_done();
    00000248 CDr00r00         [24]  630 	call	_wait_vbl_done
                                    631 ;keyboard.c:197: for (i = 0; i < numloops; i++)
    0000024B 04               [ 4]  632 	inc	b
                                    633 ;keyboard.c:201: }
    0000024C 18 F7            [12]  634 	jr	00103$
                                    635 	.area _CODE
                                    636 	.area _INITIALIZER
    00000000                        637 __xinit__keydown:
    00000000 00                     638 	.db #0x00	; 0
    00000001                        639 __xinit__pet_has_name:
    00000001 00                     640 	.db #0x00	; 0
    00000002                        641 __xinit__name_character_index:
    00000002 00                     642 	.db #0x00	; 0
                                    643 	.area _CABS (ABS)
